<EditDataFormTemplateSpec 
	xmlns="bb_appfx_editdataformtemplate"
	xmlns:c="bb_appfx_commontypes" 
	ID="efacb5b2-18ab-45f0-a33f-da79026d1449" 
	Name="OCM Sponsorship Transfer Form Edit Data Form"
	Description="A data form for editing ocm sponsorship transfer form records" 
	Author="Mark Sellers"
	DataFormInstanceID="a1e64c1f-50f5-4973-93db-89aad1655cb9" 
	RecordType="Sponsorship"
	c:SecurityUIFolder="Sponsorship"
	FormHeader="Sponsorship Transfer Children"
	>

	<SPDataForm>

		<!-- define the edit load SP, which is used to load the data for the form -->
		<LoadImplementation SPName="USR_USP_DATAFORMTEMPLATE_EDITLOAD_OCMSPONSORSHIPTRANSFERFORM">
			<c:CreateProcedureSQL>
				<![CDATA[
create procedure dbo.USR_USP_DATAFORMTEMPLATE_EDITLOAD_OCMSPONSORSHIPTRANSFERFORM
(
    @ID uniqueidentifier,
    @DATALOADED bit = 0 output,
    @TSLONG bigint = 0 output,
	  @FROMCHILDID nvarchar(10) = null output,
	  @TOCHILDID nvarchar(10) = null output
)
as

	set nocount on;

	-- be sure to set these, in case the select returns no rows
	set @DATALOADED = 0
	set @TSLONG = 0

	-- populate the output parameters, which correspond to fields on the form.  Note that
	-- we set @DATALOADED = 1 to indicate that the load was successful.  Otherwise, the system
	-- will display a "no data loaded" message.  Also note that we fetch the TSLONG so that concurrency
	-- can be considered.

  --declare @fromChildId nvarchar(10);
  --declare @toChildId nvarchar(10);
  declare @commitmentId uniqueidentifier = null;

  --get the FromChild, the one in the existing Sponsorship that's being transferred:
  select 
		  @DATALOADED = 1,
		  --@TSLONG = s.TSLONG,
	    @FROMCHILDID = soFrom.LOOKUPID,
	    @commitmentId = s.SPONSORSHIPCOMMITMENTID
  from dbo.SPONSORSHIP s
	  --join dbo.SPONSORSHIP s on s.SPONSORSHIPCOMMITMENTID = sa.SPONSORSHIPCOMMITMENTID
	  join dbo.SPONSORSHIPOPPORTUNITY soFrom on soFrom.ID = s.SPONSORSHIPOPPORTUNITYID
  where s.ID = @ID;

  -- try to get the ToChild, the one the user picked from the Transfer Form when saved:
/*
select @TOCHILDID = soTo.LOOKUPID	   
  from dbo.SPONSORSHIPAUDIT sa
	  join dbo.SPONSORSHIP s on s.SPONSORSHIPCOMMITMENTID = sa.SPONSORSHIPCOMMITMENTID
	  join dbo.SPONSORSHIPOPPORTUNITY soTo on soTo.ID = s.SPONSORSHIPOPPORTUNITYID
  where s.SPONSORSHIPCOMMITMENTID = @commitmentId
  and s.STATUSCODE = 1
*/
	return 0;
				]]>
			</c:CreateProcedureSQL>
		</LoadImplementation>
    
    
    <SaveImplementation SPName="USR_USP_DATAFORMTEMPLATE_EDIT_OCMSPONSORSHIPTRANSFERFORM">
			<c:CreateProcedureSQL>
				<![CDATA[
create procedure dbo.USR_USP_DATAFORMTEMPLATE_EDIT_OCMSPONSORSHIPTRANSFERFORM 
(
	@ID uniqueidentifier,
	@CHANGEAGENTID uniqueidentifier = null,
	@FROMCHILDID nvarchar(10),
	@TOCHILDID nvarchar(10)
)
as

	set nocount on;

	if @CHANGEAGENTID is null  
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output
				
	declare @CURRENTDATE datetime
	set @CURRENTDATE = getdate()

  --user must have filled these in!
  if (@FROMCHILDID = null) or (@TOCHILDID = null) or (@FROMCHILDID = '') or (@TOCHILDID = '')
    raiserror ('Both ChildID values must be filled in!', 16, 1);

	begin try
		-- handle updating the data

    declare @commitmentId uniqueidentifier = null;

    --get the FromChild, the one in the existing Sponsorship that's being transferred:
    select 
	      @commitmentId = s.SPONSORSHIPCOMMITMENTID
    from dbo.SPONSORSHIP s
    where s.ID = @ID;

    -- try to get the ToChild, the one the user picked from the Transfer Form when saved:
    declare @USERTOCHILDID nvarchar(10) = null;
    
    select @USERTOCHILDID = soTo.LOOKUPID	   
    from dbo.SPONSORSHIPAUDIT sa
	    join dbo.SPONSORSHIP s on s.SPONSORSHIPCOMMITMENTID = sa.SPONSORSHIPCOMMITMENTID
	    join dbo.SPONSORSHIPOPPORTUNITY soTo on soTo.ID = s.SPONSORSHIPOPPORTUNITYID
    where s.SPONSORSHIPCOMMITMENTID = @commitmentId
    and s.STATUSCODE = 1
    
    --validate that the Child To value from the form matches what the user typed in:
    if (@USERTOCHILDID is not null) and (@USERTOCHILDID <> @TOCHILDID)
      begin
        declare @errorMsg nvarchar(100) = concat('Child ', @TOCHILDID, ' entered by user does not match Child ', @USERTOCHILDID, ' in the Transfer Form!');        
        raiserror (@errorMsg, 16, 1);
      end
    
    -- if we get here, do the work:    
		insert into TESTINGONLY (FROMCHILD, TOCHILD)
    values (@FROMCHILDID, @TOCHILDID)
	end try

  begin catch
		exec dbo.USP_RAISE_ERROR
		return 1
	end catch

return 0;
				]]>
			</c:CreateProcedureSQL>
		</SaveImplementation>

	</SPDataForm>

	<!-- describe fields on the form, which correspond to parameters on the SP.  Note that system paramters 
	like the record ID, DATALOADED, TSLONG, and CURRENTAPPUSERID need not be listed. -->
	<FormMetaData xmlns="bb_appfx_commontypes">
		<FormFields>
			<FormField FieldID="FROMCHILDID" Caption="From Child" DataType="String" MaxLength="10" Required="true" />
			<FormField FieldID="TOCHILDID" Caption="To Child" DataType="String" MaxLength="10" Required="true" />
		</FormFields>
	</FormMetaData>

  <c:DataFormExtension DataFormInstanceID="c5012f3e-a9b4-4d0d-bc27-6fa3818c71c2" RenderStyle="Tab" TabCaption="Transfer Children" />
  
</EditDataFormTemplateSpec>