<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="4AF5093A-661F-4A40-BD76-3F6DF613B02F"
	Name="USR_USP_D3_CAMPAIGN_BUSINESSPROCESS"
	Description="D3 Campaign stored procedure used for the business process."
	Author="Memphis Sellers"
	SPName="USR_USP_D3_CAMPAIGN_BUSINESSPROCESS"
	GrantServiceRolePermission="true"
	>

	<!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	02-Feb-2015		Memphis			Initial Version copied from Cary's USR_USP_D4_CAMPAIGN_BUSINESSPROCESS
	28-Aug-2015		CMayeda			Changed raiserror syntax to work with SQL Server 2012 (CRM 4.0)
	-->

	<CreateProcedureSQL>
		<![CDATA[

create procedure dbo.USR_USP_D3_CAMPAIGN_BUSINESSPROCESS (
	@campaignType tinyint,
	@changeAgentID uniqueidentifier,
	@outputTableName nvarchar(100),
	@successCount int = 0 output,
	@exceptionCount int = 0 output
)
as
begin
	--declare	@CAMPAIGNTYPE tinyint = 0 -- Cash
	--declare @changeAgentID uniqueidentifier
	--declare @outputTableName nvarchar(100)
	--declare	@successCount int = 0 
	--declare	@exceptionCount int = 0 
	declare @rowCount int = 0

	-- passed in by the parameter set record user was on when biz proc was started:
	--declare @campaignType tinyint = 2;  -- 0=Cash, 1=EFT Active, 2=EFT Held Credit Card, 3=EFT Held Direct Debit

	if @CHANGEAGENTID is null
			exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;

	declare @currentDate date = Cast(GETDATE() as date)

	declare @childIDList dbo.USR_UDT_CHILDIDLIST;

	declare @successCounter int = 0;
	declare @exceptionCounter int = 0;

	set @successCount = 0;
	set @exceptionCount = 0;

	-- **** NOTE: THIS IS FOR TESTING ONLY ****
	--declare @constituentId uniqueidentifier = '3AEA7B94-DE6F-483A-A29C-00279FDD4922';				
	declare @doNotContactSolicitCodeId uniqueidentifier;
	declare @affiliateOfficeId uniqueidentifier;
	declare @sponsorLookupId nvarchar(10);

	select @affiliateOfficeId = ID
	from dbo.CONSTITUENCYCODE
	where lower([DESCRIPTION]) = LOWER('Affiliate Office')

	select @doNotContactSolicitCodeId = ID
	from dbo.SOLICITCODE
	where LOWER([DESCRIPTION]) = LOWER('Do not contact') -- lower('Do not contact')

	-- Try to lookup ids
	--exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @subcategoryID output, @categoryName, @subcategoryName, @raiseErrorIfNotFound_True

	declare @subcategoryID uniqueidentifier;

	declare @interactionContactMethodId uniqueidentifier;
	--declare @phoneContactMethodID uniqueidentifier;
	--declare @emailContactMethodID uniqueidentifier;

	-- Phone
	--select @phoneContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower ('Phone')
	-- Email
	--select @emailContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower ('Email')

	declare @interactionCategoryId uniqueidentifier;
	select @interactionCategoryId = ID from dbo.INTERACTIONCATEGORY where LOWER(NAME) = LOWER('Sponsorship Delinquency')

	declare @categoryName nvarchar(100) = 'Sponsorship Delinquency'
	declare @cashSubcategoryName nvarchar(100) = 'Delinquent 3 Month';
	/* 
	Removed for D3
	declare @heldEFTCreditCardSubcategoryName nvarchar(100) = 'Delinquent 2 Month - Credit Card';
	declare @heldEFTDirectDebitSubcategoryName nvarchar(100) = 'Delinquent 2 Month - Direct Debit';
	declare @activeEFTSubcategoryName nvarchar(100) = 'Delinquent 2 Month - EFT';
	*/declare @raiseErrorIfNotFound_True bit = 1

	declare @writeToExceptionLog bit = 0;		-- flag to identify when to write a record to the output table indicating no interaction was created

	declare @subcategoryName nvarchar(100);		-- will hold one of the category name values above based on campaign type

	-- Removed for D3 if @campaignType = 0 -- cash
		set @subcategoryName = @cashSubcategoryName;

	-- Removed for D3 if @campaignType = 1 -- eft active
	-- Removed for D3 	set @subcategoryName = @activeEFTSubcategoryName;


	--declare @contactMethodDesc_Phone nvarchar (100) = 'Phone';
	declare @contactMethodDesc_Email nvarchar (100) = 'Email';
	declare @contactMethodDesc_Mail nvarchar (100) = 'Mail';
	declare @contactMethodDesc nvarchar(100);   -- this will get populated by either of the above values before creating the interaction

	declare @exceptionMessage nvarchar(100) = '';
	declare @amountException bit = 0;
	declare @noEmailMessage nvarchar(100) = '';

	declare @expectedDate date = cast(getdate() as date);

	declare @solicitCodeList table (CODEDESCRIPTION nvarchar(100))
	declare @isNoEmailOrLetters bit = 0;
	declare @isNoCalls bit = 0;

	declare @interactionSummary nvarchar(100);		-- holds the value of the interaction objective, based on payment type
	declare @interactionContactMethod nvarchar(100);-- holds the contact method which is based on solicit code
	declare @interactionSubcategory nvarchar(100);	-- holds the subcategory which is based on payment type & held or not

	declare @sponsorshipPayMethod nvarchar(100);	-- holds whether this is Cash or EFT
	declare @eftType tinyint = 0;					-- holds whether this is CC (1) or Direct Debit (2), compare agains the constant values instead of the literal 1 or 2
	declare @CREDITCARD_EFTTYPE tinyint = 1;		-- constant value for CC eft type of 1, used for checking @eftTYPE values
	declare @DIRECTDEBIT_EFTTYPE tinyint = 2;		-- constant value for DirectDebit eft type of 2, used for checking @eftTYPE values
	declare @CASH_PAYMETHOD nvarchar(100) = 'CASH'	-- constant value for the CASH payment method type used for @sponsorshipPayMethod
	declare @EFT_PAYMETHOD nvarchar(100) = 'EFT'	--constant value for the EFT payment method type used for @sponsorshipPayMethod

	declare @statusCode_Pending tinyint = 1;		-- this is the one we use in the interactions created in this biz process
	declare @statusCode_Completed tinyint = 2
	declare @statusCode_Unsuccessful tinyint = 3
	declare @statusCode_Cancelled tinyint = 4
	declare @statusCode_Declined tinyint = 5

	declare @isNewSponsor bit = 0;					-- flag to keep track of when sponsor changes
	declare @currentSponsorId uniqueidentifier = NewId();		-- holds the sponsorid that was just looped in the cursor, used to identify when sponsorId changes in the cursor loop
	--declare @doPhoneProcess bit = 0;				-- flag that says to perform the phone interaction workflow
	declare @createInteractions bit = 0;			-- flag to identify to create the interactions or not

	declare @childrenExistForSponsor bit = 0;		-- flag identifying if this sponsor has kids for the given campaign type:
	declare @giftFinancialSponsorId uniqueidentifier = null;  -- used to ensure this isn't a corresponding sponsor
	declare @isCorrespondent bit = 0;				-- flag to identify if correspondent sponsorship

	-- Response Category descriptions
	declare @interactionResponseCategory_DonorContact nvarchar(100) = 'Donor Contact'
	declare @interactionResponseCategory_LeftMessage nvarchar(100) = 'Left Message'
	declare @interactionResponseCategory_MessageType nvarchar(100) = 'Message Type'
	declare @interactionResponseCategory_Cancelled nvarchar(100) = 'Cancelled'

	declare @interactionResponseCategory_EFTReceived nvarchar(100) = 'EFT Received'
	declare @interactionResponse_No nvarchar(100) = 'No';
	declare @interactionResponse_None nvarchar(100) = 'None';
	declare @interactionOwner uniqueidentifier = null;  -- this will hold the @callCenterManagerConstituentID if a Phone Call type of interaction

	declare @callCenterManagerConstituentID uniqueidentifier = 'B25168DC-4DD4-46ED-B4DD-C5A26A965667';	-- This constituent is hard coded via a script
	declare @sponsorInteractionId uniqueidentifier;


	begin try
		-- this sproc won't process Phone campaigns, so throw an exception if that campaign type is passed in:
	-- Removed for D3 	if @CAMPAIGNTYPE > 3
	-- Removed for D3 		raiserror ('Unable to process the given Campaign Parameter Type of Phone.', 16, 1)

		if @doNotContactSolicitCodeId is null
			raiserror ('Unable to locate solicit code: Do Not Contact! Unable to continue.', 16, 1)

		if @affiliateOfficeId is null
			raiserror ('Unable to locate constituency code: Affiliate Office! Unable to continue.', 16, 1)
				
	--		if @phoneContactMethodID is null 
	--			RAISERROR ('Unable to locate the contact method: Phone.', 16, 1)
		
	-- Removed for D3 	if @emailContactMethodID is null
	-- Removed for D3 		RAISERROR ('Unable to locate the contact method: Email.', 16, 1)
		
		if @interactionCategoryId is null
			RAISERROR ('Unable to locate the interaction category: Sponsorship Delinquency.', 16, 1)


		--'First Day of Previous Month'
		declare @firstDayPreviousMonth date;
		set @firstDayPreviousMonth =  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 2, 0)
		
--		print ''
--		print 'Latest NTD to include'
--		print @firstDayPreviousMonth

		--'First Day of 2 Months ago'
		declare @secondDayTwoMonthsAgo date;
		set @secondDayTwoMonthsAgo =  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 4, 0)
		set @secondDayTwoMonthsAgo = DATEADD(DAY, 1, @secondDayTwoMonthsAgo)

--		print ''
--		print 'Earliest NTD to include'
--		print @secondDayTwoMonthsAgo
		
		--'Second day of the current month
		declare @secondDayCurrentMonth date;
		set @secondDayCurrentMonth =  dateadd(day, 1, dateadd(month, datediff(month, 0, getdate()), 0))

--		print ''
--		print '2nd Day of the current month - used to determine past due amount'
--		print @secondDayCurrentMonth
		
		
		
		declare @D3ResultsTable table (
				CHILDID uniqueidentifier, 
				REVENUESPLITID uniqueidentifier, 
				SPONSORID uniqueidentifier, 
				SPONSORSHIPID uniqueidentifier,
				NTD date, 
				PAYMETHOD tinyint, 
				SPONSORSHIPREVENUEID uniqueidentifier, 
				ISHELD bit,
	            NUMBEROFMONTHSPASTDUE decimal(6,3),
	            LASTPAYMENTDATE date);
		
		declare @childId uniqueidentifier, @revenueSplitId uniqueidentifier, @sponsorId uniqueidentifier, @sponsorshipId uniqueidentifier;
		declare @NTD date, @payMethod tinyint, @sponsorshipRevenueId uniqueidentifier, @isHeld bit, @numberOfMonthsPastDue decimal(6,3), @lastPaymentDate date;

		set @payMethod = 99;  -- default to neither cash nor eft
	    set @numberOfMonthsPastDue = -1;

	-- ** NEW **: get only the children for the given  Campaign payment method type, so use this variable to compare against each child's paymethod!
	--                  based on these campaign type values and payment method values:
	--      0=Cash, 1=EFT Active, 2=EFT Held Credit Card, 3=EFT Held Direct Debit
		/*  
	        [PAYMENTMETHODCODE] (0) = 'Cash' (1) ='Check' (2) ='Credit card' (3) ='Direct debit' 
	        (4) ='Stock' (5) ='Property' (6) ='Gift-in-kind' (9) ='None' (10) ='Other' 
	        (11) ='Standing order'  
		*/        

		-- constants used for checking what payment type is this sponsorship:
		declare @CASHPAYMENT_VALUE tinyint = 0;
		declare @EFTPAYMENT_VALUE tinyint = 1;

		declare @SHOWHISTORY bit = 0;
		-- ******************** A. Get qualifying sponsors  **********************************

		/*
		 -- Get the financial sponsors that:
			1.1
			 Do NOT have a solicit code of “Do not contact”.
			1.2
			 Do NOT have any interaction with a completed Category of Sponsorship Delinquency in the previous month (based on Expected date).
			1.3
			 Do NOT have the constituency code of “Affiliate Office”?
		*/
		-- first get the sponsors that meet 1.1 - 1.3
		
		declare @D3SponsorList table (
		   [sponsorId] uniqueidentifier
			)
		
		
		--;with D3SponsorList (sponsorId)
		--as
		--(
		insert into @D3SponsorList
			select distinct dbo.SPONSORSHIP.CONSTITUENTID
			from dbo.SPONSORSHIP
			where
				(
	/* Removed for D3
				not exists (select 1 from dbo.INTERACTION
					where (dbo.INTERACTION.INTERACTIONSUBCATEGORYID in (select ID from dbo.INTERACTIONSUBCATEGORY 
							where dbo.INTERACTIONSUBCATEGORY.INTERACTIONCATEGORYID = @interactionCategoryId)
				and (dbo.INTERACTION.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID
				and STATUSCODE = 2
				and (DATEPART(m, EXPECTEDDATE) = DATEPART(m, DATEADD(m, -1, getdate()))
				AND YEAR(EXPECTEDDATE) = YEAR(DATEADD(m, -1, getdate())))))
				)
			and 
	*/		not exists (select 1 from dbo.CONSTITUENCY where (dbo.CONSTITUENCY.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID 
				  and dbo.CONSTITUENCY.CONSTITUENCYCODEID = @affiliateOfficeId and (dbo.CONSTITUENCY.DATETO is null or dbo.CONSTITUENCY.DATETO > GETDATE())))
			and not exists (select 1 from dbo.CONSTITUENTSOLICITCODE where (dbo.CONSTITUENTSOLICITCODE.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID
				  and dbo.CONSTITUENTSOLICITCODE.SOLICITCODEID = @doNotContactSolicitCodeId and (dbo.CONSTITUENTSOLICITCODE.ENDDATE is null or dbo.CONSTITUENTSOLICITCODE.ENDDATE > GETDATE())))
			)      
		--)
		/*
			1.4
			 Has child sponsorship one of “Active”, “Active (transfer pending)” or “Active (reassign)”
			1.5
			 The current sponsorship status for the child must be “Sponsored”
			1.6
			 The recurring gift NTD>= 1st of the month 2 months back
			  NTD is between 1st day of current month -1 and 2nd day of current month -2, INCLUSIVE
			  -- <=1st day of current month -1 and >= 2nd day of current month -2
				(For example, currentNTDis 5/1/13 then the date range used would be 3/2/13 to 4/1/2013)	 
		*/


		-- then get the children for each sponsor that meet 1.4-1.6
		
		declare @D3ChildrenList table (
		   [childId] uniqueidentifier,
	       revenueSplitId uniqueidentifier,
	       sponsorId uniqueidentifier,
	       sponsorshipId uniqueidentifier,
	       payMethod int,
	       sponsorshipRevenueId uniqueidentifier,
	       isHeld bit
		)
				
		--, D3ChildrenList (childId, revenueSplitId, sponsorId, sponsorshipId, payMethod, sponsorshipRevenueId, isHeld)
		--as
		--(
		insert into @D3ChildrenList
			select dbo.SPONSORSHIP.SPONSORSHIPOPPORTUNITYID,
				   dbo.SPONSORSHIP.REVENUESPLITID,
				   dbo.SPONSORSHIP.CONSTITUENTID,
				   dbo.SPONSORSHIP.ID,
				   dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID(dbo.SPONSORSHIP.REVENUESPLITID) as PAYMETHOD,
				   (select REVENUEID from dbo.REVENUESPLIT where ID = dbo.SPONSORSHIP.REVENUESPLITID) as SPONSORSHIPREVENUEID,
				   dbo.USR_UFN_CHECK_RECURRINGGIFT_ISHELD(dbo.SPONSORSHIP.REVENUESPLITID) as ISHELD  -- 0 false, 1 true
			from dbo.SPONSORSHIP
			join dbo.USR_SPONSORSHIPEXTENSION se on se.ID = dbo.SPONSORSHIP.ID
			join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE statusCode on statusCode.ID = se.CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID and statusCode.DESCRIPTION = 'Sponsored'
			left outer join dbo.SPONSORSHIPOPPORTUNITYCHILD on  dbo.SPONSORSHIPOPPORTUNITYCHILD.ID = SPONSORSHIP.SPONSORSHIPOPPORTUNITYID  -- this will help us identify only children commitments      
			where (dbo.SPONSORSHIP.CONSTITUENTID IN (select sponsorId from @D3SponsorList)
			and STATUSCODE = 1   -- status of 'Active'
			and (dbo.UFN_SPONSORSHIP_GIFTFINANCIALSPONSORID(dbo.SPONSORSHIP.ID) is null	
				 or dbo.UFN_SPONSORSHIP_GIFTFINANCIALSPONSORID(dbo.SPONSORSHIP.ID) = dbo.SPONSORSHIP.CONSTITUENTID)	-- filter out correspondent kids and sponsorships
			and dbo.SPONSORSHIPOPPORTUNITYCHILD.ID is not null  -- filter out project sponsorships         
			)
			union
			-- This is the logic from the USR_UFN_GETACTIVE_FINANCIALCOMMITMENTS_BYSPONSOR, 
			-- to get the children for which this sponsor is a financial sponsor, then join with the above select:
			select
				ACTIVESPONSORSHIP.SPONSORSHIPOPPORTUNITYID,
				ACTIVESPONSORSHIP.REVENUESPLITID,
				ACTIVESPONSORSHIP.CONSTITUENTID,
				ACTIVESPONSORSHIP.ID,
				dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID(ACTIVESPONSORSHIP.REVENUESPLITID) as PAYMETHOD,
				(select REVENUEID from dbo.REVENUESPLIT where ID = ACTIVESPONSORSHIP.REVENUESPLITID) as SPONSORSHIPREVENUEID,
				dbo.USR_UFN_CHECK_RECURRINGGIFT_ISHELD(ACTIVESPONSORSHIP.REVENUESPLITID) as ISHELD  -- 0 false, 1 true
			from dbo.SPONSORSHIPTRANSACTION GIFTSTART
			inner join dbo.SPONSORSHIPCOMMITMENT on SPONSORSHIPCOMMITMENT.ID = GIFTSTART.SPONSORSHIPCOMMITMENTID
			left join dbo.SPONSORSHIPTRANSACTION GIFTEND on GIFTEND.SPONSORSHIPCOMMITMENTID = GIFTSTART.SPONSORSHIPCOMMITMENTID and GIFTEND.TRANSACTIONSEQUENCE = (select min(MINSEQ.TRANSACTIONSEQUENCE) from dbo.SPONSORSHIPTRANSACTION MINSEQ where MINSEQ.SPONSORSHIPCOMMITMENTID = GIFTSTART.SPONSORSHIPCOMMITMENTID and MINSEQ.TRANSACTIONSEQUENCE > GIFTSTART.TRANSACTIONSEQUENCE and MINSEQ.ACTIONCODE in(2,3,5,9))
			left join dbo.SPONSORSHIP GIFTENDSPONSORSHIP on GIFTENDSPONSORSHIP.ID = GIFTEND.CONTEXTSPONSORSHIPID
			left join dbo.SPONSORSHIP ACTIVESPONSORSHIP on ACTIVESPONSORSHIP.SPONSORSHIPCOMMITMENTID = GIFTSTART.SPONSORSHIPCOMMITMENTID and ACTIVESPONSORSHIP.STATUSCODE = 1
			join dbo.USR_SPONSORSHIPEXTENSION se on se.ID = ACTIVESPONSORSHIP.ID
			join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE statusCode on statusCode.ID = se.CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID and statusCode.DESCRIPTION = 'Sponsored'
			left outer join dbo.SPONSORSHIPOPPORTUNITYCHILD on  dbo.SPONSORSHIPOPPORTUNITYCHILD.ID = ACTIVESPONSORSHIP.SPONSORSHIPOPPORTUNITYID  -- this will help us identify only children commitments
			where (GIFTSTART.GIFTFINANCIALSPONSORID IN (select sponsorId from @D3SponsorList)
			and ACTIVESPONSORSHIP.STATUSCODE = 1   -- status of 'Active'
			and (@SHOWHISTORY = 1 or GIFTEND.ID is null)
			and dbo.SPONSORSHIPOPPORTUNITYCHILD.ID is not null)  -- filter out project sponsorships
		--)
		-- ************   I THINK this is where we filter out the records based on the campaign type passed in! *********************
		insert into @D3ResultsTable
		select childId
			   , revenueSplitId
			   , sponsorId
			   , sponsorshipId
			   , case when REVENUESCHEDULE.NEXTTRANSACTIONDATE > REVENUESCHEDULE.ENDDATE then null else REVENUESCHEDULE.NEXTTRANSACTIONDATE end as 'NTD'
			   , payMethod
			   , sponsorshipRevenueId
			   , isHeld
			   , dbo.USR_UFN_RECURRINGGIFT_GETNUMBEROFMONTHSPASTDUE (rev.ID, @secondDayCurrentMonth) as NumberOfMonthsPastDue
	           , (select	top 1 cast (rev_payment.DATE as date)
				    from	dbo.RECURRINGGIFTACTIVITY rg_act
				    join dbo.FINANCIALTRANSACTIONLINEITEM as payment on payment.ID = rg_act.PAYMENTREVENUEID									
				    join dbo.FINANCIALTRANSACTION as rev_payment on payment.FINANCIALTRANSACTIONID = rev_payment.ID									
				   where SOURCEREVENUEID = rev.ID and rev_payment.TRANSACTIONAMOUNT > 0
				   order by rev_payment.DATE desc) as LASTPAYMENTDATE	   
		from @D3ChildrenList
	    join	dbo.REVENUESPLIT revsplit on revenueSplitId = revsplit.ID
	    join	dbo.REVENUE rev on revsplit.REVENUEID = rev.ID
	    join	dbo.REVENUESCHEDULE on REVENUESCHEDULE.ID = rev.ID --REVENUE.ID		

		where 
	-- Removed for D3	(
			((case when REVENUESCHEDULE.NEXTTRANSACTIONDATE > REVENUESCHEDULE.ENDDATE then null else REVENUESCHEDULE.NEXTTRANSACTIONDATE end) 
				between @secondDayTwoMonthsAgo and @firstDayPreviousMonth)
	/* Removed for D3		 or
			 -- This is for the 2.5
			 (cast ((case when REVENUESCHEDULE.NEXTTRANSACTIONDATE > REVENUESCHEDULE.ENDDATE then null else REVENUESCHEDULE.NEXTTRANSACTIONDATE end) as Date) = '4/1/14'
			)
		and isHeld = case when @campaignType in (0,1) then 0 else 1 end
		)
	*/	order by NTD;
		
		select @rowCount = count(*) from @D3ResultsTable

--		print ''
--		print 'D3 Results prior to removal of rows'
--		print @RowCount


--		print ''
--		print 'Removing those < 3 months and 4+ months delinquent'
		delete D3results
		  from @D3ResultsTable D3results
		where NumberOfMonthsPastDue < 3 or NumberOfMonthsPastDue >= 4 

		select @rowCount = count(*) from @D3ResultsTable

--		print ''
--		print 'D3 Results after removal of rows'
--		print @RowCount

	--select *
	--	from @D3ResultsTable
	--	where SPONSORID = '3FE5E9BC-442E-4505-962C-3FFE4D6422B4'
	--select id from constituent where lookupid = '143678'

		set nocount on

		-- put the results into a cursor so we can create the necessary interactions, one-by-one and do all the various pieces of work required
		declare D3resultsCursor cursor local fast_forward for
		select *
		from @D3ResultsTable
		order by SPONSORID;

		open D3resultsCursor;
							
		fetch next from D3resultsCursor into @childId, @revenueSplitId, @sponsorId, @sponsorshipId, @NTD, @payMethod, @sponsorshipRevenueId, @isHeld, @numberOfMonthsPastDue, @lastPaymentDate ;

		-- set the new sponsor flag for the first sponsor
		set @isNewSponsor = 1;

		-- set flag identifying if this sponsor has kids for the given campaign type:
		set @childrenExistForSponsor = 0;
		
		-- for each Sponsorship we have: 
		while (@@FETCH_STATUS = 0) 
			begin			
				 --make sure this sponsor is NOT the corresponding sponsor for this sponsorship!
				select @giftFinancialSponsorId = dbo.UFN_SPONSORSHIP_GIFTFINANCIALSPONSORID(@sponsorshipId);
								
				-- compare this sponsorship id with the gift financial sponsor id and throw it out if it doesn't matches:
				if @giftFinancialSponsorId is not null
					begin
						-- we don't want to process this because this is the corresponding sponsor for this sponsorship
						GOTO SKIP_THIS_RECORD;
					end

				if @isNewSponsor = 1 
					begin					
						set @createInteractions = 0;				
						set @currentSponsorId = @sponsorId
				
						-- rebuild the solicit code stuff for the new sponsor
						-- do the work of creating interactions based on payment method, etc.
						insert @solicitCodeList
						select * from dbo.USR_UFN_GET_CONSTITUENT_SOLICITCODES_LIST(@sponsorId)

						if exists(select 1 from @solicitCodeList where lower(CODEDESCRIPTION) in ('do not mail', 'do not mail except magazine', 'email only - no direct mail', 'no system letters', 'blackout all communication', 'do not contact'))
	                        begin
								set @isNoEmailOrLetters = 1;  -- true
	                            set @noEmailMessage = 'Solicit Code of Do Not Mail or similar';
	                        end
						else 
	                        begin
								set @isNoEmailOrLetters = 0;  -- false
	                            set @noEmailMessage = '';
	                        end


						
								insert @childIDList 
								select CHILDID
								from @D3ResultsTable 
								where (SPONSORID = @sponsorId)

						-- this sponsor may not have children for this campaigntype, so see if there are any kids in the list:
						if exists (select 1 from @childIDList)
							begin
								set @childrenExistForSponsor = 1;
								--print 'Children exist for this sponsor: ' + Cast(@payMethod as nvarchar(4)) + Cast(@isHeld as nvarchar(2));
							end
						else
							begin
								set @childrenExistForSponsor = 0;
								--print 'No children exist for this sponsor: ' + Cast(@payMethod as nvarchar(4)) + Cast(@isHeld as nvarchar(2));
							end
								
					end
		

					if @childrenExistForSponsor = 1 
						begin			
							-- check if sponsor has valid primary address:
							if exists (select 1 from dbo.ADDRESS 
							            where CONSTITUENTID = @sponsorId
										  and ISPRIMARY = 1 and DONOTMAIL = 0 
							              and (rtrim(ltrim(ADDRESSBLOCK)) <> '' or rtrim(ltrim(CITY)) <> '') and ENDDATE = '0000')
								begin
									-- check if 2.3 Does the financial sponsor have one or more of the solicit codes: 
									-- Do not email, No System Letters
									if @isNoEmailOrLetters = 1
										begin
											--do not create email interaction
											--set @doPhoneProcess = 1;										
											set @createInteractions = 0;
	                                        set @writeToExceptionLog = 1;
										end
									else
	                                    begin
									        set @createInteractions = 1;
	                                        set @writeToExceptionLog = 0;
	                                    end
								end
							else
								-- sponsor does not have a valid primary address, so do tests for phone interaction
								begin
									--2.2 goes here, no address so can't create any interaction for this sponsor
									set @createInteractions = 0;
	                                set @writeToExceptionLog = 1;
	                                set @noEmailMessage = 'No valid primary address';
								end

	                        -- new Memphis 6/3/13: check the number of months past due to determine if this really is delinquent 2 months or not:
	                        -- but only if we're about to create an interaction, otherwise we don't care:
	                        if (@createInteractions = 1 and @writeToExceptionLog = 0)
	                            begin
	                                -- number of months past due should be between 0 and 2:
	                                if (@numberOfMonthsPastDue < 3 or @numberOfMonthsPastDue >= 4)
	                                    begin
											set @createInteractions = 0;
											set @writeToExceptionLog = 1;
	                                        set @amountException = 1;
	                                        set @noEmailMessage = '';
	                                    end
	                                else
	                                    begin
	                                        set @createInteractions = 1;
	                                        set @amountException = 0;
	                                        set @writeToExceptionLog = 0;
	                                        set @noEmailMessage = '';
	                                    end
	                            end
	                        else
	                            set @amountException = 0;


							if @createInteractions = 1
								begin
									set @interactionSummary = 'D3 Campaign'
									/* Removed for D3 
									case when @payMethod in (0,1,9) then 'Cash – D3 Campaign'
										when @payMethod IN (2,3) and @isHeld = 0 then 'Active EFT – D3 Campaign'
										when @payMethod IN (2,3) and @isHeld = 1 then 'Held EFT – D3 Campaign' 
										end;
									*/
									-- prevent this from creating multiple sponsor interactions per child
									if not exists (select 1 from dbo.INTERACTION
										where (dbo.INTERACTION.INTERACTIONSUBCATEGORYID in (select ID from dbo.INTERACTIONSUBCATEGORY 
												where dbo.INTERACTIONSUBCATEGORY.INTERACTIONCATEGORYID = @interactionCategoryId)
										and dbo.INTERACTION.CONSTITUENTID = @sponsorId
										and Cast(EXPECTEDDATE as date) = CAST(getdate() as DATE)
										and OBJECTIVE = @interactionSummary))
										begin									
											-- create the interactions here
											-- set the subcategory name based on payment method if this is eft held:
											-- (2) ='Credit card' (3) ='Direct debit' 
	/* Removed for D3										if @campaignType = 2 or @campaignType = 3
												set @subcategoryName = case when @payMethod = 3 then @heldEFTDirectDebitSubcategoryName
																			when @payMethod = 2 then @heldEFTCreditCardSubcategoryName
																	   end;
	*/							
											exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @subcategoryID output, @categoryName, @subcategoryName, @raiseErrorIfNotFound_True
									  
											-- set these values for email interactions, since this only creates email types of interactions:
											set @contactMethodDesc = @contactMethodDesc_Mail;
											set @interactionOwner = null;                      
								
											exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
													@id = @sponsorInteractionId output,
													@constituentID = @sponsorId,
													@summary = @interactionSummary,
													@categoryName = @categoryName,
													@subcategoryName = @subcategoryName,
													@expectedDate = @expectedDate,
													@owner = @interactionOwner,
													@contactMethodDesc = @contactMethodDesc,
													@comment = 'D3 - Added through business process. Included in phone campaign as well.',                                                                      
													@letterTypeDesc = '',
													@fulfillmentStatusDesc = '',
													@eftBrochureCode = 0,
													@resendCode = 0,
													@changeAgentID = @CHANGEAGENTID  
								
											-- add the delinquent children to the interaction just created:
											if @sponsorInteractionId  is not null
												begin
													exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
														@interactionID = @sponsorInteractionId,
														@childIDList = @childIDList,
														@changeAgentID = null
													
													--increment the successcounter
													set @successCounter = @successCounter + 1;

													select @sponsorLookupId = LOOKUPID
													from dbo.CONSTITUENT
													where ID = @sponsorId;
					
													if @sponsorLookupId is not null
														begin
															insert into dbo.USR_D3_CAMPAIGN_BUSINESSPROCESS_RESULTS 
																(SPONSORLOOKUPID
																, D3CAMPAIGNDATE
																, CAMPAIGNTYPE
																, D3INTERACTIONSTATUS
																, ADDEDBYID
																, DATEADDED
																, CHANGEDBYID
																, DATECHANGED
																)
															values 
																(@sponsorLookupId
																, CAST(GETDATE() as date)
																, 0 -- Removed for D3 @CAMPAIGNTYPE
																, @contactMethodDesc + ' interaction created'
																, @changeAgentID
																, @currentDate
																, @changeAgentID
																, @currentDate
																);
														end
												end
								
											-- if this is a Phone type of interaction, add the responses:
											/*
											Interaction Responses:
												Donor Contact = No
												EFT Received = No
												Left Message = No
												Message Type = None
												Cancelled = No
											*/
										end  -- if this interaction doesn't exist
								end  -- if @createInteractions = 1
						end  -- if @childrenExistForSponsor = 1

				if @writeToExceptionLog = 1
					begin
						select @sponsorLookupId = LOOKUPID
						from dbo.CONSTITUENT
						where ID = @sponsorId;
	                    
	                    set @exceptionMessage = case when @amountException = 1 then 'NTD and Amount Past Due do not match: ' + Cast(ISNULL(@NTD, '') as nvarchar(30)) + '  ' + Cast(@numberOfMonthsPastDue as nvarchar(5))
	                                                 when @amountException = 0 then 'No D3 mail interaction created: ' + @noEmailMessage
	                                                 end;
				
						if @sponsorLookupId is not null
							begin
								insert into dbo.USR_D3_CAMPAIGN_BUSINESSPROCESS_RESULTS 
									(SPONSORLOOKUPID
									, D3CAMPAIGNDATE
									, CAMPAIGNTYPE
									, D3INTERACTIONSTATUS
									, ADDEDBYID
									, DATEADDED
									, CHANGEDBYID
									, DATECHANGED
									)
								values 
									(@sponsorLookupId
									, CAST(GETDATE() as date)
									, 0 -- Removed for D3 @CAMPAIGNTYPE
									, @exceptionMessage
									, @changeAgentID
									, @currentDate
									, @changeAgentID
									, @currentDate
									);
							end
						
						set @exceptionCounter = @exceptionCounter + 1;
	                    -- clear out the variables used for exception message
	                    set @noEmailMessage = '';
	                    set @amountException = 0;
	                    set @exceptionMessage = '';
	                    set @writeToExceptionLog = 0;
				
					end
			
				SKIP_THIS_RECORD:
		        fetch next from D3resultsCursor into @childId, @revenueSplitId, @sponsorId, @sponsorshipId, @NTD, @payMethod, @sponsorshipRevenueId, @isHeld, @numberOfMonthsPastDue, @lastPaymentDate ;
		
				-- check for a different sponsor
				if @currentSponsorId <> @sponsorId
					begin
						set @isNewSponsor = 1;
						set @currentSponsorId = @sponsorId;
				
						-- reset stuff that's specific to the sponsor:	
						delete from @solicitCodeList;
				
						set @isNoEmailOrLetters = 0;	-- false
						set @isNoCalls = 0;				-- false								
						set @childrenExistForSponsor = 0;
						--set @doPhoneProcess = 0;
	                    set @noEmailMessage = '';
	                    set @amountException = 0;
	                    set @writeToExceptionLog = 0;
				
						delete from @childIDList;
				
					end
				else
					set @isNewSponsor = 0;
					--print 'same sponsor...';
			end

		close D3resultsCursor;
		deallocate D3resultsCursor;

		set @successCount = @successCounter;
		set @exceptionCount = @exceptionCounter;

--		print ''
--		print 'Success Count = ' + cast (@successCount as nvarchar(10))
--		print 'Exception Count = ' + cast (@exceptionCounter as nvarchar(10))
	end try

	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1;
	end catch

end
		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
