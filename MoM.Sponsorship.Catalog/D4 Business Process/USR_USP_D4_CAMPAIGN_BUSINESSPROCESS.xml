<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="5A311DE5-4F74-4EA9-B1E4-151CD3947F79"
	Name="USR_USP_D4_CAMPAIGN_BUSINESSPROCESS"
	Description="D4 Campaign stored procedure used for the business process."
	Author="Cary Mayeda"
	SPName="USR_USP_D4_CAMPAIGN_BUSINESSPROCESS"
	GrantServiceRolePermission="true"
	>

	<!-- 
	Remarks:    

	History:
	Date            Modified By     Comments
	14-May-2013		CMayeda			Initial Version copied from Memphis' USR_USP_D2_CAMPAIGN_BUSINESSPROCESS
	07-Jun-2013		CMayeda			Removed code for May specific groupings and phone interactions
									Modified the check for previous month interactions to go off the subcategory and not the category	
	06-Jan-2014		CMayeda			Updated to use USR_UFN_RECURRINGGIFT_GETNUMBEROFMONTHSPASTDUE
									Removed some old temporary commented out code
	07-Jan-2014		CMayeda			Deleted records that were less than 4 months delinquent after inserting into @d4ResultsTable
	28-Aug-2015		CMayeda			Changed raiserror syntax to work with SQL Server 2012 (CRM 4.0)
	26-May-2016		Memphis			Refactored for new requirements: create both Email and Mail interactions, no checking solicit codes for Mail type.
	13-Jun-2016		Memphis			Changed subcategory value to D4 Cancellation Letter
	15-Jun-2016		Memphis			Need to create a Mail interaction, no matter what, *IF* unable to create an Email interaction!  Otherwise, follow normal rules...
	16-Jun-2016		Memphis			New requirements from Pamela (see below):
									Per Pamela, need to try to first create a Mail interaction and if not, then create an email
									If unable to create an Email, then go ahead & create a Mail regardless of solicit codes!
									The happy is to create one mail AND one email on the record. The “unable” means if the mail or email address is invalid or has solicit applied codes.
									1.     If unable to create mail interaction AND email interaction, then create ONLY mail interaction.
									2.     If unable to create mail interaction BUT able to create email, then create ONLY email interaction.
									3.     If able to create mail interaction BUT unable to create email, then create ONLY mail interaction.
	17-Jun-2016		Memphis			Need to add check for Blackout All Communication and Email only - no direct mail solicit codes.
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_D4_CAMPAIGN_BUSINESSPROCESS (
	@campaignType tinyint,
	@changeAgentID uniqueidentifier,
	@outputTableName nvarchar(100),
	@successCount int = 0 output,
	@exceptionCount int = 0 output
)
as
begin

	if @changeAgentID is null
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output;

	declare @currentDate date = Cast(GETDATE() as date)

	-- Interaction constants
	declare @callCenterManagerConstituentID uniqueidentifier = 'B25168DC-4DD4-46ED-B4DD-C5A26A965667';	-- This constituent is hard coded via a script

	declare @interactionContactMethodId uniqueidentifier
	declare @mailContactMethodID uniqueidentifier
	declare @emailContactMethodID uniqueidentifier
	declare @phoneContactMethodID uniqueidentifier

	-- Mail
	select @mailContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower('Mail')
	-- Email
	select @emailContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower('Email')

	select @phoneContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower('Phone')


	declare @categoryName nvarchar(100) = 'Sponsorship Delinquency'
	
	-- Memphis 6-13-16 change subcategory value per Pamela:
	--declare @subcategoryName nvarchar(100) = 'Delinquent 4 Month - Cancellation Letter'
	declare @subcategoryName nvarchar(100) = 'D4 Cancellation Letter'
	
	/* declare @subcategoryName_Phone nvarchar(100) = 'Delinquency Reminder'   -- ** This is temporary, since the "normal" process will not need a phone call interaction */
	
	declare @raiseErrorIfNotFound_True bit = 1
	declare @interactionCategoryId uniqueidentifier
	declare @subcategoryID uniqueidentifier
	/* declare @subcategoryID_Phone uniqueidentifier   -- ** This is temporary, since the "normal" process will not need a phone call interaction */
	
	select @interactionCategoryId = ID from dbo.INTERACTIONCATEGORY where lower(NAME) = lower(@categoryName)
																				
	declare @statusCode_Pending tinyint = 1;		-- this is the one we use in the interactions created in this biz process
	declare @statusCode_Completed tinyint = 2
	declare @statusCode_Unsuccessful tinyint = 3
	declare @statusCode_Cancelled tinyint = 4
	declare @statusCode_Declined tinyint = 5

	-- Solicit Codes and Constituencies
	declare @doNotContactSolicitCodeId uniqueidentifier;
	
	declare @doNotEmailSolicitCodeId uniqueidentifier;

	declare @doNotMailSolicitCodeId uniqueidentifier;
	declare @noSystemLettersSolicitCodeId uniqueidentifier;
	declare @blackoutAllCommunicationCodeId uniqueidentifier;
	declare @emailOnlySolicitCodeId uniqueidentifier;

	declare @affiliateOfficeConstituencyId uniqueidentifier;
	declare @preventAutoCancelConstituencyId uniqueidentifier;

	declare @sponsorLookupId nvarchar(10);

	select @affiliateOfficeConstituencyId = ID
	  from dbo.CONSTITUENCYCODE
	 where lower(DESCRIPTION) = lower('Affiliate Office')

	select @preventAutoCancelConstituencyId = ID
      from dbo.CONSTITUENCYCODE
	 where lower(DESCRIPTION) = lower('Prevent Auto Cancel')

	select @doNotContactSolicitCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('Do not contact')

	select @doNotEmailSolicitCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('Do not email')

	select @doNotMailSolicitCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('Do not mail')
	 
	select @emailOnlySolicitCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('Email only - no direct mail')

	select @noSystemLettersSolicitCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('No system letters')

	select @blackoutAllCommunicationCodeId = ID
	  from dbo.SOLICITCODE
	 where lower(DESCRIPTION) = lower('Blackout All Communication')

	/*declare @jubileeWriteOffReasonCode nvarchar(63)
	set @jubileeWriteOffReasonCode = N'6 - Jubilee'
	*/
	-- Get letter code table ids
	declare @childCountLetterVersion_OneChildLetter uniqueidentifier = null
	select @childCountLetterVersion_OneChildLetter = ID from dbo.USR_INTERACTIONEXTENSIONLETTERCHILDVERSIONCODE where DESCRIPTION = lower ('One Child Letter')
	
	declare @childCountLetterVersion_TwoChildrenLetter uniqueidentifier = null
	select @childCountLetterVersion_TwoChildrenLetter = ID from dbo.USR_INTERACTIONEXTENSIONLETTERCHILDVERSIONCODE where DESCRIPTION = lower ('Two Children Letter')
	
	declare @childCountLetterVersion_MultipleChildrenLetter uniqueidentifier = null
	select @childCountLetterVersion_MultipleChildrenLetter = ID from dbo.USR_INTERACTIONEXTENSIONLETTERCHILDVERSIONCODE where DESCRIPTION = lower ('Multiple Children Letter')
	

	-- Call sprocs to get IDs that raise errors
	-- And check to make sure every constant has a value				
	begin try
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @subcategoryID output, @categoryName, @subcategoryName, @raiseErrorIfNotFound_True
		
		if @doNotContactSolicitCodeId is null
			raiserror ('Unable to locate solicit code: Do not contact! Unable to continue.', 16, 1)

		if @doNotEmailSolicitCodeId is null
			raiserror ('Unable to locate solicit code: Do not email! Unable to continue.', 16, 1)

		if @doNotMailSolicitCodeId is null
			raiserror ('Unable to locate solicit code: Do not mmail! Unable to continue.', 16, 1)
			
		if @emailOnlySolicitCodeId is null
			raiserror ('Unable to locate solicit code: Email only - no direct mail! Unable to continue.', 16, 1)

		if @noSystemLettersSolicitCodeId is null
			raiserror ('Unable to locate solicit code: No system letters! Unable to continue.', 16, 1)
			
		if @blackoutAllCommunicationCodeId is null
			raiserror ('Unable to locate solicit code: Blackout All Communication! Unable to continue.', 16, 1)

		if @affiliateOfficeConstituencyId is null
			raiserror ('Unable to locate constituency code: Affiliate Office! Unable to continue.', 16, 1)
				
		if @preventAutoCancelConstituencyId is null
			raiserror ('Unable to locate constituency code: Prevent Auto Cancel! Unable to continue.', 16, 1)

		/* if @mailContactMethodID is null 
			RAISERROR ('Unable to locate the contact method: Phone.', 16, 1)
		*/
		
		if @emailContactMethodID is null
			RAISERROR ('Unable to locate the contact method: Email.', 16, 1)
		
		if @interactionCategoryId is null
			RAISERROR ('Unable to locate the interaction category: Sponsorship Delinquency.', 16, 1)

		if @childCountLetterVersion_OneChildLetter is null 
			RAISERROR ('Unable to locate the child count code: One Child Letter.', 16, 1)
		
		if @childCountLetterVersion_OneChildLetter is null 
			RAISERROR ('Unable to locate the child count code: Two Children Letter.', 16, 1)
		
		if @childCountLetterVersion_MultipleChildrenLetter is null 
			RAISERROR ('Unable to locate the child count code: Multiple Children Letter.', 16, 1)
	
	end try
	begin catch
		exec dbo.USP_RAISE_ERROR
	end catch

	begin try
		begin transaction d4CampaignTransaction
		
		--'First Day of 3 Months ago'
		declare @firstDayThreeMonthsAgo date
		set @firstDayThreeMonthsAgo =  dateadd(month, datediff(month, 0, getdate()) - 3, 0)
		
		-- Memphis 5-26-16: NEED to add the payment method so we can tell if EFT or not when creating the Mail Interaction:
		-- Use this Function:  dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID(ACTIVESPONSORSHIP.REVENUESPLITID) as PAYMETHOD
		declare @d4ResultsTable table (
			sponsorshipID uniqueidentifier,
			childID uniqueidentifier, 
			childLookupID nvarchar(100),
			childName nvarchar(154),  
			financialSponsorID uniqueidentifier, 
			financialSponsorLookupID nvarchar(100), 
			financialSponsorName nvarchar(255),  
			sponsorshipRevenueSplitID uniqueidentifier, 
			sponsorshipRecurringGiftID uniqueidentifier,
			NTD date, 
			numberOfMonthsPastDue decimal(6,3),
			payMethod int
			);
				
		insert @d4ResultsTable	
		select	sp.ID as sponsorshipID,
				sp.SPONSORSHIPOPPORTUNITYID as childID,
				so.LOOKUPID as childLookupID,
				so_child.NAME as childName,
				sponsor.ID as financialSponsorID,
				sponsor.LOOKUPID as financialSponsorLookupID,
				sponsor.NAME as financialSponsorName,
				sp.REVENUESPLITID as sponsorshipRevenueSplitID,
				rev.ID as sponsorshipRecurringGiftID,
				case when revschedule.NEXTTRANSACTIONDATE > revschedule.ENDDATE then null else revschedule.NEXTTRANSACTIONDATE end as NTD,
				dbo.USR_UFN_RECURRINGGIFT_GETNUMBEROFMONTHSPASTDUE(rev.ID, dateadd(day, 1, dateadd(month, datediff(month, 0, getdate()), 0))) as numberOfMonthsPastDue,
				dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID(sp.REVENUESPLITID) as PAYMETHOD
		  from	dbo.SPONSORSHIP sp
		  
		  join	dbo.REVENUESPLIT revsplit on sp.REVENUESPLITID = revsplit.ID
		  join	dbo.REVENUE rev on revsplit.REVENUEID = rev.ID
		  join	dbo.REVENUESCHEDULE revschedule on revschedule.ID = rev.ID --REVENUE.ID		
		  join	dbo.CONSTITUENT sponsor on rev.CONSTITUENTID = sponsor.ID
		  join	dbo.USR_SPONSORSHIPEXTENSION se on se.ID = sp.ID
		  join	dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE statusCode on 
					statusCode.ID = se.CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID and statusCode.DESCRIPTION = 'Sponsored' -- 1.6
		  join	dbo.SPONSORSHIPOPPORTUNITY so on so.ID = sp.SPONSORSHIPOPPORTUNITYID
		  join	dbo.SPONSORSHIPOPPORTUNITYCHILD so_child on so_child.ID = sp.SPONSORSHIPOPPORTUNITYID
		
		
		 where  sp.STATUSCODE = 1   -- 1.5 - Status of 'Active' 

				-- 1.7 NTD Less than <= first day of Month - 3
		   and  (case when revschedule.NEXTTRANSACTIONDATE > revschedule.ENDDATE then null else revschedule.NEXTTRANSACTIONDATE end) 
		          <= @firstDayThreeMonthsAgo 
		          
				-- 1.1 - Do NOT have a solicit code of “Do not contact”.
		   and	not exists (select 1 
					          from dbo.CONSTITUENTSOLICITCODE constit_sol
					         where constit_sol.CONSTITUENTID = sp.CONSTITUENTID
			                   and constit_sol.SOLICITCODEID = @doNotContactSolicitCodeId 
			                   and (constit_sol.ENDDATE is null or constit_sol.ENDDATE > GETDATE()))

				-- 1.2 - Do NOT have any interaction with a completed Category of Sponsorship Delinquency in the previous month (based on Expected date).			                   
		   and	not exists  (select	1 
		                       from	dbo.INTERACTION int_
							  where	int_.INTERACTIONSUBCATEGORYID = @subcategoryID 
							    and	int_.CONSTITUENTID = sponsor.ID
							    and DATEPART(m, int_.EXPECTEDDATE) = DATEPART(m, DATEADD(m, -1, getdate()))
			                    and YEAR(int_.EXPECTEDDATE) = YEAR(DATEADD(m, -1, getdate()))
			                    and int_.STATUSCODE = @statusCode_Completed )		   
				-- 1.3, 1.4 - Do NOT have the constituency code of “Affiliate Office” or "Prevent Auto Cancel"
		   and	not exists (select 1 
		                      from dbo.CONSTITUENCY constit 
		                     where constit.CONSTITUENTID = sp.CONSTITUENTID 
			                   and constit.CONSTITUENCYCODEID in (@affiliateOfficeConstituencyId, @preventAutoCancelConstituencyId)
			                   and (constit.DATETO is null or constit.DATETO > GETDATE()))

		-- 1/7/15 csm added:
		-- remove the rows that aren't between 4 months or more past due:
		delete from @d4ResultsTable
		where numberOfMonthsPastDue < 4;

		-- Memphis 5-26-16: need to identify if any paymethods are EFT or not:
		declare @D4Interactions table (
			financialSponsorID uniqueidentifier,
			financialSponsorLookupID nvarchar(100), 
			interactionID uniqueidentifier,
			hasValidPrimaryEmail bit,
			hasValidPrimaryAddress bit,
			doNotEmail bit,
			doNotMail bit,
			noSystemLetters bit,
			blackoutCommunications bit,
			numberOfChildren int,
			--isException bit,
			isAmountException bit,
			exceptionMessage nvarchar(255),
			isEFT bit,
			createMailInteraction bit,
			createEmailInteraction bit			
			)

		insert @D4Interactions (financialSponsorID, financialSponsorLookupID)
		select distinct financialSponsorID, financialSponsorLookupID from @d4ResultsTable
		
		update	@D4Interactions
		   set	interactionID = newid(),
				hasValidPrimaryEmail =	case 
											when exists (select 1 from dbo.EMAILADDRESS where DONOTEMAIL = 0 and ISPRIMARY = 1 and CONSTITUENTID = d4Int.financialSponsorID) then 1 
											else 0 
										end,
				hasValidPrimaryAddress = case
											when exists (select 1 from dbo.ADDRESS where DONOTMAIL = 0 and ISPRIMARY = 1 and CONSTITUENTID = d4Int.financialSponsorID
											              and (rtrim(ltrim(ADDRESSBLOCK)) <> '' or rtrim(ltrim(CITY)) <> '') and ENDDATE = '0000') then 1
											else 0
										end,
				doNotEmail = case 
								when exists (select 1 from dbo.CONSTITUENTSOLICITCODE constit_sol
							 		          where constit_sol.CONSTITUENTID = d4Int.financialSponsorID
										        and constit_sol.SOLICITCODEID = @doNotEmailSolicitCodeId 
											    and (constit_sol.ENDDATE is null or constit_sol.ENDDATE > GETDATE())) then 1 
								else 0 
							end,

				-- Memphis 6-16-16: now check for valid Mail solicitation, as we did before:
				doNotMail = case				
								when exists (select 1 from dbo.CONSTITUENTSOLICITCODE constit_sol
								 	          where constit_sol.CONSTITUENTID = d4Int.financialSponsorID
									            and (constit_sol.SOLICITCODEID = @doNotMailSolicitCodeId 
													or constit_sol.SOLICITCODEID = @emailOnlySolicitCodeId)
										        and (constit_sol.ENDDATE is null or constit_sol.ENDDATE > GETDATE())) then 1 
								else 0 
							end,
				
				noSystemLetters = case 
									when exists (select 1 from dbo.CONSTITUENTSOLICITCODE constit_sol
						 						  where constit_sol.CONSTITUENTID = d4Int.financialSponsorID
													and constit_sol.SOLICITCODEID = @noSystemLettersSolicitCodeId 
													and (constit_sol.ENDDATE is null or constit_sol.ENDDATE > GETDATE())) then 1 
									else 0 
								  end,
				-- Memphis 6-17-16 added to check for blackout all comms code:
				blackoutCommunications = case
										when exists (select 1 from dbo.CONSTITUENTSOLICITCODE constit_sol
						 							  where constit_sol.CONSTITUENTID = d4Int.financialSponsorID
														and constit_sol.SOLICITCODEID = @blackoutAllCommunicationCodeId 
														and (constit_sol.ENDDATE is null or constit_sol.ENDDATE > GETDATE())) then 1 
										else 0 
									end,
									
				numberOfChildren = (select count(d4Results.childID) from @d4ResultsTable d4Results where d4Int.financialSponsorID = d4Results.financialSponsorID group by d4Results.financialSponsorID),
				
				isEFT = case 
							when exists (select 1 from @d4ResultsTable d4R where d4Int.financialSponsorID = d4R.financialSponsorID
											and paymethod in(2,3)) then 1
							else 0
						end 
						
		  from	@D4Interactions d4Int
		  
		-- Memphis 5-26-16: need to refactor this because we must create a Mail interaction, if possible,
		--  and also create an Email interaction, if possible.
		-- The isException field will only be set based on the number of months past due: <4 or not.
		-- The exceptionMessage is set the same as the isException field.
		update	@D4Interactions
		   -- add a column to identify if we'll create a Mail interaction based on doNotMail and doNotEmail, etc.			
		   -- add a column to identify if we'll create an eMail interaction based on doNotMail and doNotEmail, etc.			
		   --set isException = case 
		   -- only way we can create mail, at this point, is no solicit codes and has a valid address:
		   set createMailInteraction = case 
										when ((noSystemLetters = 0 and blackoutCommunications = 0) and hasValidPrimaryAddress = 1 and doNotMail = 0) then 1
										else 0
		--								when   (noSystemLetters = 1
		--									or (hasValidPrimaryAddress = 0)
		--									or (doNotMail = 1)) then 0
		--								when (noSystemLetters = 0
		--									and (hasValidPrimaryAddress = 1 and doNotMail = 1)) then 0
		--								when (noSystemLetters = 0
		--									and (hasValidPrimaryAddress = 1 and doNotMail = 0)) then 1
		--								else 1
									 end,

				-- only way we create email interaction is no solicit codes and has valid email address:
		   		createEmailInteraction = case 
											when ((noSystemLetters = 0 and blackoutCommunications = 0) and hasValidPrimaryEmail = 1 and doNotEmail = 0) then 1
										else 0
--								when   (noSystemLetters = 1
--									or (hasValidPrimaryEmail = 0)
--									or (doNotEmail = 1)) then 0								
--								when   (noSystemLetters = 0
--									and (hasValidPrimaryEmail = 1 and doNotEmail = 1)) then 0
--								when   (noSystemLetters = 0
--									and (hasValidPrimaryEmail = 1 and doNotEmail = 0)) then 1
--								else 1
							 end,
							 
				-- add a column for amountException that we can use just for the amount exception (see above):
				isAmountException = case when exists (select 1 from @d4ResultsTable results where results.numberOfMonthsPastDue < 4 
										and results.financialSponsorID = D4Int.financialSponsorID)  then 1
									else 0
								  end,

				exceptionMessage =	case 
--										when noSystemLetters = 1 then 'No system letter'
--									    when hasValidPrimaryEmail = 1 and doNotEmail = 1 and doNotMail = 1 then 'Do not email and Do not Mail solicit codes'
--									    when hasValidPrimaryEmail = 0 and doNotMail = 1 then 'Do not mail solicit code'
									    when exists (select 1 from @d4ResultsTable results where results.numberOfMonthsPastDue < 4 
																							 and results.financialSponsorID = D4Int.financialSponsorID)  then
											'NTD and Amount Past Due do not match'
										else ''
									 end
		  from	@D4Interactions D4Int
		  
						 					
		-- Perform the insert here for Mail Interactions first:
		insert into dbo.INTERACTION (
			ID,
			INTERACTIONSUBCATEGORYID,
			ADDEDBYID,
			CHANGEDBYID,
			CONSTITUENTID,
			EXPECTEDDATE,
			FUNDRAISERID,
			INTERACTIONTYPECODEID,
			OBJECTIVE,
			STATUSCODE,
			COMMENT
		) 
		select	
			interactionID,
			@subcategoryID,
			@changeAgentID,
			@changeAgentID,
			financialSponsorID,
			@currentDate,
			null,
			@mailContactMethodID,
--			case 
--				when hasValidPrimaryEmail = 1 and doNotEmail = 0 then @emailContactMethodID
--				else @mailContactMethodID
--			end,
			'D4 Campaign - Mail',
--			case 
--				when hasValidPrimaryEmail = 1 and doNotEmail = 0 then 'D4 Campaign - Email'
--				else 'D4 Campaign - Mail'
--			end,
			@statusCode_Pending,
			'' /* 'D4 - Group ' + CAST (d4Group as nvarchar(1)) */
			
		  from @D4Interactions
		 where isAmountException = 0
		 and (createMailInteraction = 1 
		 	or (createEmailInteraction = 0 and createMailInteraction = 0));
		 

		-- Memphis 5-26-16: need to populate the EFTBROCHURECODE value: treat as a bit - 0 is No, 1 is Yes.
		insert dbo.USR_INTERACTIONEXTENSION (ID, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED, CHILDCOUNTLETTERVERSIONCODEID, EFTBROCHURECODE)
		select interactionID, @changeAgentID, @changeAgentID, @currentDate, @currentDate,
			   case numberOfChildren
					when 0 then null
					when 1 then @childCountLetterVersion_OneChildLetter
					when 2 then @childCountLetterVersion_TwoChildrenLetter
					else @childCountLetterVersion_MultipleChildrenLetter
				end,
				-- NEED THE PAYMENT METHOD!
				isEFT
		  from @D4Interactions
		 where isAmountException = 0
		 and (createMailInteraction = 1 
		 	or (createEmailInteraction = 0 and createMailInteraction = 0));
		 

		insert dbo.USR_INTERACTIONEXTENSIONCHILDREN
				(INTERACTIONID, SPONSORSHIPOPPORTUNITYCHILDID, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED)
		select d4int.interactionID, d4Results.childID, @changeAgentID, @changeAgentID, @currentDate, @currentDate
			  from @D4Interactions d4Int
			  join @d4ResultsTable	d4Results on d4Int.financialSponsorID = d4Results.financialSponsorID
		 where isAmountException = 0
		 and (createMailInteraction = 1 
		 	or (createEmailInteraction = 0 and createMailInteraction = 0));
		
		insert dbo.USR_D4_CAMPAIGN_BUSINESSPROCESS_RESULTS 
			(SPONSORLOOKUPID
			, D4CAMPAIGNDATE
			, CAMPAIGNTYPE
			, D4INTERACTIONSTATUS
			, ADDEDBYID
			, DATEADDED
			, CHANGEDBYID
			, DATECHANGED
			)
		select	
			financialSponsorLookupID,
			@currentDate,
			@campaignType,
			'D4 Mail interaction not created - ' + exceptionMessage,			
			@changeAgentID,
			@currentDate,
			@changeAgentID,
			@currentDate
			
		  from @D4Interactions
		  where isAmountException = 1
		  and (createMailInteraction = 1 
	 		or (createEmailInteraction = 0 and createMailInteraction = 0));
		
		-- perform insert for Email Interaction:
		-- must reset/recreate the interactionID value so it's not reused from above:
		update	@D4Interactions
		   set	interactionID = newid();
		
		insert into dbo.INTERACTION (
			ID,
			INTERACTIONSUBCATEGORYID,
			ADDEDBYID,
			CHANGEDBYID,
			CONSTITUENTID,
			EXPECTEDDATE,
			FUNDRAISERID,
			INTERACTIONTYPECODEID,
			OBJECTIVE,
			STATUSCODE,
			COMMENT
		) 
		select	
			interactionID,
			@subcategoryID,
			@changeAgentID,
			@changeAgentID,
			financialSponsorID,
			@currentDate,
			null,
			@emailContactMethodID,
--			case 
--				when hasValidPrimaryEmail = 1 and doNotEmail = 0 then @emailContactMethodID
--				else @mailContactMethodID
--			end,
			'D4 Campaign - Email',
--			case 
--				when hasValidPrimaryEmail = 1 and doNotEmail = 0 then 'D4 Campaign - Email'
--				else 'D4 Campaign - Mail'
--			end,
			@statusCode_Pending,
			'' /* 'D4 - Group ' + CAST (d4Group as nvarchar(1)) */
			
		  from @D4Interactions
		 where isAmountException = 0
		 and createEmailInteraction = 1;

		insert dbo.USR_INTERACTIONEXTENSION (ID, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED, CHILDCOUNTLETTERVERSIONCODEID)
		select interactionID, @changeAgentID, @changeAgentID, @currentDate, @currentDate,
			   case numberOfChildren
					when 0 then null
					when 1 then @childCountLetterVersion_OneChildLetter
					when 2 then @childCountLetterVersion_TwoChildrenLetter
					else @childCountLetterVersion_MultipleChildrenLetter
				end
		  from @D4Interactions
		 where isAmountException = 0
		 and createEmailInteraction = 1;

		insert dbo.USR_INTERACTIONEXTENSIONCHILDREN
				(INTERACTIONID, SPONSORSHIPOPPORTUNITYCHILDID, ADDEDBYID, CHANGEDBYID, DATEADDED, DATECHANGED)
		select d4int.interactionID, d4Results.childID, @changeAgentID, @changeAgentID, @currentDate, @currentDate
			  from @D4Interactions d4Int
			  join @d4ResultsTable	d4Results on d4Int.financialSponsorID = d4Results.financialSponsorID
		 where isAmountException = 0
		 and createEmailInteraction = 1;
		
		
		insert dbo.USR_D4_CAMPAIGN_BUSINESSPROCESS_RESULTS 
			(SPONSORLOOKUPID
			, D4CAMPAIGNDATE
			, CAMPAIGNTYPE
			, D4INTERACTIONSTATUS
			, ADDEDBYID
			, DATEADDED
			, CHANGEDBYID
			, DATECHANGED
			)
		select	
			financialSponsorLookupID,
			@currentDate,
			@campaignType,
			'D4 Email not created - ' + exceptionMessage,
						/*	case 
								when isException = 1 then exceptionMessage
								when hasValidPrimaryEmail = 0 then 'No Valid Email'
								when doNotEmail = 1 then 'Do Not Email'
							end,  */
			@changeAgentID,
			@currentDate,
			@changeAgentID,
			@currentDate
			
		  from @D4Interactions
		  where isAmountException = 1
		  and createEmailInteraction = 1;
		  --or hasValidPrimaryEmail = 0
		  --or doNotEmail = 1	  
		---- END OF EMAIL INTERACTION **********
		
		
		-- Memphis 5-26-16: REFACTOR the following to get the counts
		set @successCount = (select count(*) from @D4Interactions where isAmountException = 0);
		set @exceptionCount = (select count(*) from @D4Interactions where isAmountException = 1);
		
		--print @successCount 
		--print @exceptionCount 
		
		commit transaction d4CampaignTransaction
		
		
	end try
		
	begin catch
		rollback transaction d4CampaignTransaction
		exec dbo.USP_RAISE_ERROR
		return 1;
	end catch

end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
