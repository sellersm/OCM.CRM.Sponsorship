<GlobalChangeSpec 
	xmlns="bb_appfx_globalchange"
	xmlns:c="bb_appfx_commontypes"
	ID="f71ff3df-ba51-40e9-ada1-03036d6f30a5"
	Name="Merge Sponsorship Commitment Recurring Gifts Global Change"
	Description="Merge recurring gifts based upon a selection of sponsorship commitments"
	Author="Zuri Group\Ken Swift"
	DisplayName="Merge Sponsorship Commitment Recurring Gifts"
	GlobalChangeFolder="Sponsorship"
	SPName="USR_USP_GLOBALCHANGE_MERGESPONSORSHIPCOMMITMENTRECURRINGGIFTS"
>

	<!-- describe the SP that performs the global change operation -->
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_GLOBALCHANGE_MERGESPONSORSHIPCOMMITMENTRECURRINGGIFTS
(
	@CHANGEAGENTID uniqueidentifier = null,
	@ASOF as datetime = null,
	@NUMBERADDED int = 0 output,
	@NUMBEREDITED int = 0 output,
	@NUMBERDELETED int = 0 output,
	@SPONSORSHIPCOMMITMENTSELECTIONID uniqueidentifier,
  @LOOKUPID nvarchar(100),
	@EARLIESTSTARTDATE datetime,
  @DELETERECORDS bit
)
as			
	set nocount off;
	
	declare @CURRENTDATE datetime
	set @CURRENTDATE = getdate();
	set @NUMBERADDED = 0;
	set @NUMBEREDITED = 0;
	set @NUMBERDELETED = 0; 
	
	if @CHANGEAGENTID is null
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;
					
	begin try
    declare @COMMITMENT table (SPONSORSHIPCOMMITMENTID uniqueidentifier primary key)

    --*************GET ALL THE COMMITMENTS FROM THE SELECTION OR A SINGLE LOOKUPID***********
    if @SPONSORSHIPCOMMITMENTSELECTIONID is not null
    begin
	    insert into @COMMITMENT
		    select * from dbo.ufn_IdSetReader_GetResults_guId(@SPONSORSHIPCOMMITMENTSELECTIONID)
    end
    
    if @LOOKUPID != ''
    begin
      insert into @COMMITMENT
        select ID from SPONSORSHIPCOMMITMENT where LOOKUPID = @LOOKUPID
    end

    -- **********GET A LIST OF ALL THE RECURRING GIFTS THAT BELONG TO A COMMITMENT THAT HAS MORE THAN**************
    -- **********ONE RECURRING GIFT ************
    declare @RECURRINGGIFT table (
	    ROWNUMBER int identity(1,1),
	    SPONSORSHIPCOMMITMENTID uniqueidentifier,
	    REVENUEID uniqueidentifier,
	    [RANK] INT,
	    [DATE] datetime
    )

    insert into @RECURRINGGIFT
	    select
        distinct
		    S.SPONSORSHIPCOMMITMENTID,
		    R.ID,
		    RANK() OVER (PARTITION BY S.SPONSORSHIPCOMMITMENTID ORDER BY R.DATE DESC) AS Rank,
		    R.DATE
	    from
		    SPONSORSHIP S 
	    left join
		    FINANCIALTRANSACTIONLINEITEM RS on S.REVENUESPLITID = RS.ID
	    left JOIN
		    FINANCIALTRANSACTION R on RS.FINANCIALTRANSACTIONID = R.ID
	    where
		    S.SPONSORSHIPCOMMITMENTID in (
			    select 
				    S.SPONSORSHIPCOMMITMENTID
			    from 
				    SPONSORSHIP S
			    inner join
				    smartfield35EFF8A4CA954D9AA9BA012A8C82C5E3 ESSD on S.CONSTITUENTID = ESSD.ID
			    inner join	
				    @COMMITMENT C ON S.SPONSORSHIPCOMMITMENTID = C.SPONSORSHIPCOMMITMENTID
			    where
				    ESSD.VALUE > @EARLIESTSTARTDATE
			    group by
				    S.SPONSORSHIPCOMMITMENTID
			    having COUNT(S.REVENUESPLITID) > 1
	    )

    --***************CREATE THE MERGE SET - ONE ROW FOR EACH SOURCE TO TARGET RECORD*******************
    --***************WHERE THE RANK IS GREATER THAN 1 (1 = TARGET)*************************************
    declare @MERGESET table (
	    ROWNUMBER int identity(1,1),
      RANK int,
	    SPONSORSHIPCOMMITMENTID uniqueidentifier, 
	    TARGETREVENUEID uniqueidentifier,
	    SOURCEREVENUEID uniqueidentifier,
	    MINDATE datetime,
	    APPEALID uniqueidentifier,
	    CHANNELCODEID uniqueidentifier
    )

    declare @i int = 1
    declare @max int 

    set @max = (select max(rownumber) from @RECURRINGGIFT)

    while @i <= @max
    begin
	    -- INSERT THE MERGE RECORD
	    insert into @MERGESET
		    select 
          RANK,
			    SPONSORSHIPCOMMITMENTID, 
			    (select top 1 REVENUEID from @RECURRINGGIFT where SPONSORSHIPCOMMITMENTID = RG1.SPONSORSHIPCOMMITMENTID and RANK = 1),
			    REVENUEID,
			    (select min(DATE) from @RECURRINGGIFT where SPONSORSHIPCOMMITMENTID = RG1.SPONSORSHIPCOMMITMENTID),
			    (select top 1 R.APPEALID from @RECURRINGGIFT RG inner join REVENUE_EXT R on RG.REVENUEID = R.ID where RG.ROWNUMBER = RG1.ROWNUMBER order by [RANK] desc),
			    (select top 1 R.CHANNELCODEID from @RECURRINGGIFT RG inner join REVENUE_EXT R on RG.REVENUEID = R.ID where RG.ROWNUMBER = RG1.ROWNUMBER order by [RANK] desc)
		    from
			    @RECURRINGGIFT RG1
		    where
			    ROWNUMBER = @i and RANK > 1
	    set @i = @i + 1
    end

    --*******************UPDATE THE DATE OF THE RECURRING GIFTS TO THE*****************************
    --*******************EARLIEST RECURRING GIFT FOR THIS COMMITMENT*******************************
    update
	    FINANCIALTRANSACTION
    set
	    DATE = M.MINDATE
    from
	    FINANCIALTRANSACTION
    inner join
	    @MERGESET M on FINANCIALTRANSACTION.ID = M.TARGETREVENUEID	

    --*******************UPDATE THE RECURRING GIFT ACTIVITY SOURCE ID TO THE NEW RG*****************
    update 
	    RECURRINGGIFTACTIVITY 
    set 
	    SOURCEREVENUEID = M.TARGETREVENUEID 
    from
	    RECURRINGGIFTACTIVITY 
    inner join
	    @MERGESET M on RECURRINGGIFTACTIVITY.SOURCEREVENUEID = M.SOURCEREVENUEID		

    --********************UPDATE THE RECURRING GIFT INSTALLMENTS************************************
    update 
	    RECURRINGGIFTINSTALLMENT
    set
	    REVENUEID = M.TARGETREVENUEID
    from
	    RECURRINGGIFTINSTALLMENT
    inner join
	    @MERGESET M on RECURRINGGIFTINSTALLMENT.REVENUEID = M.SOURCEREVENUEID

    --*************UPDATE THE APPEAL SOURCE LOGIC (MOVE APPEAL AND CHANNEL CODE FROM OLDEST RG TO NEWEST**************
     declare @APPEALSET table(TARGETREVENUEID uniqueidentifier, APPEALID uniqueidentifier, CHANNELCODEID uniqueidentifier)
	   declare @OLDESTGIFT table(TARGETREVENUEID uniqueidentifier, APPEALID uniqueidentifier, CHANNELCODEID uniqueidentifier, ROWNUMBER int)

	   insert into @OLDESTGIFT
          select 
            M.TARGETREVENUEID,
            R.APPEALID,
            R.CHANNELCODEID,
            ROW_NUMBER() OVER (PARTITION BY M.TARGETREVENUEID ORDER BY M.RANK desc) AS rownumber
          from 
            REVENUE_EXT R
          inner join
            @MERGESET M on R.ID = M.SOURCEREVENUEID          

      insert into @APPEALSET
        select
          TARGETREVENUEID,
          APPEALID,
          CHANNELCODEID
        from 
            @OLDESTGIFT
        where 
            ROWNUMBER = 1
          
    update 
	    REVENUE_EXT
    set 
	    APPEALID = A.APPEALID,
	    CHANNELCODEID = A.CHANNELCODEID
    from
	    REVENUE_EXT	
    inner join
	    @APPEALSET A on REVENUE_EXT.ID = A.TARGETREVENUEID
      
    --****************RE-POINT the sponsorship to the correct recurring gift***************************
    update
	    SPONSORSHIP
    set
	    REVENUESPLITID = T.ID
    from
	    SPONSORSHIP S
    inner join
	    FINANCIALTRANSACTIONLINEITEM FTLI on S.REVENUESPLITID = FTLI.ID
    inner join
	    @MERGESET M on FTLI.FINANCIALTRANSACTIONID = M.SOURCEREVENUEID
    inner join
	    FINANCIALTRANSACTIONLINEITEM T on M.TARGETREVENUEID = T.FINANCIALTRANSACTIONID

    if @DELETERECORDS = 1
    begin
      --**************DELETE any old recurring gift installments******************************************
      delete from RECURRINGGIFTINSTALLMENT where ID = (select SOURCEREVENUEID from @MERGESET)

      --**************DELETE THE RECURRING GIFTS**********************************************************
      set @i = 0
      set @max = (select max(ROWNUMBER) from @MERGESET)
      declare @DELETEREVENUEID uniqueidentifier
      while @i < @max
      begin
	      set @DELETEREVENUEID = (select SOURCEREVENUEID from @MERGESET where ROWNUMBER = @i +1)
	      exec USP_REVENUE_DELETE @DELETEREVENUEID, @CHANGEAGENTID
	      set @i = @i + 1
      end
     end

    set @NUMBERDELETED = (select count(*) from @MERGESET)
	end try
	
	begin catch
		exec dbo.USP_RAISE_ERROR;
		return 1;
	end catch
		]]>
	</CreateProcedureSQL>

	<ParametersFormMetaData>

		<!-- describe fields on the parameter form, which correspond to parameters on the SP.  Note that system parameters 
		like the context @CHANGEAGENTID, @ASOF, @NUMBERADDED, @NUMBEREDITED, and @NUMBERDELETED need not be listed. -->
		<FormMetaData xmlns="bb_appfx_commontypes">
			<FormFields>
				<FormField FieldID="SPONSORSHIPCOMMITMENTSELECTIONID" Caption="Sponsorship commitment selection" DataType="Guid">
          <SearchList SearchListID="1F0E603C-1C55-4E1E-8218-BDB877B2CBE8">
            <FormFieldOverrides>
              <FormFieldOverride FieldID="RECORDTYPE" DefaultValueText="Sponsorship Commitment" ReadOnly="true" Caption="Record type" Hidden="false"/>
            </FormFieldOverrides>
          </SearchList>          
        </FormField>
				<FormField FieldID="LOOKUPID" Caption="Commitment lookup ID (optional)" DataType="String" />
				<FormField FieldID="EARLIESTSTARTDATE" Caption="Earlist sponsorship date (smart field)" DataType="Date" />
				<FormField FieldID="DELETERECORDS" Caption="Delete old recurring gift(s)" DataType="Boolean" />
			</FormFields>
		</FormMetaData>
	</ParametersFormMetaData>
	
</GlobalChangeSpec>
