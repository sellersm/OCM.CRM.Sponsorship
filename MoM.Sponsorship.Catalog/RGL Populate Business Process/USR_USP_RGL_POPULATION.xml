<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="132c910d-992a-42ae-a5a6-46dc78517aaa"
	Name="USR_USP_RGL_POPULATION"
	Description="Populates the RGL table"
	Author="Memphis Sellers"
	SPName="USR_USP_RGL_POPULATION"
	GrantServiceRolePermission="true"
	>

	<!-- 
	Remarks:    Populates the RGL table using rows from the 'temp' RGL Table, USR_RGLTABLE
	
	History:
	Date            Modified By     Comments
	18-Feb-2016		Memphis			Initial Version
	23-Feb-2016		Memphis			Changed the cteLastSpon CTE to use the IsMostRecentForCommitment flag to identify
									the latest Sponsorship record for any Reassign/Transfer/etc.
	26-Feb-2016		Memphis			Added code to check for Unpaid Transfer conversions, D-01153
	08-Mar-2016		Memphis			Added the output variables and code to set them at the end.
	-->


	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_RGL_POPULATION (
	@successCounterOutput int = 0 output,
	@exceptionCounterOutput int = 0output
)
as
begin
	declare @successCounter int = 0;
	declare @exceptionCounter int = 0;

	DECLARE @dateAdded   DATE = getdate ();
	--DECLARE @isDebug   BIT = 0; -- 1=show output, 0=do not show: used for outputting various debugging information, select statements, etc. to troubleshoot

	DECLARE @SPONTRANID   UNIQUEIDENTIFIER;
	DECLARE @SPONCOMMITMENTID   UNIQUEIDENTIFIER;
	DECLARE @SPONSORLOOKUPID   NVARCHAR (100);
	DECLARE @SPONSORID   UNIQUEIDENTIFIER;
	DECLARE @SPONSORSHIPSTARTDATE   DATE;
	DECLARE @INITIALSTATUS   NVARCHAR (MAX);
	DECLARE @CONVERSIONDATE   DATE;
	DECLARE @SPONOPPORTUNITYID   UNIQUEIDENTIFIER;
	DECLARE @SPONSORSHIPID   UNIQUEIDENTIFIER;
	DECLARE @LASTCONVERSIONDATE   DATE;
	DECLARE @TARGETACTIONCODE   TINYINT;
	DECLARE @REVENUEID   UNIQUEIDENTIFIER;
	DECLARE @lastSponsorshipId   UNIQUEIDENTIFIER;

	DECLARE @TARGETSPONSORSHIPID   UNIQUEIDENTIFIER;
	DECLARE @MINSTARTDATE   DATE;
	DECLARE @MAXENDDATE   DATE;
	DECLARE @GIFTSPONSORID   UNIQUEIDENTIFIER;
	DECLARE @SPONSORSHIPREASONID   UNIQUEIDENTIFIER;
	DECLARE @APPEALCATEGORY   NVARCHAR (500);
	DECLARE @APPEALNAME   NVARCHAR (500);
	DECLARE @APPEALSOURCE   NVARCHAR (MAX);
	DECLARE @INBOUNDCHANNEL   NVARCHAR (MAX);
	DECLARE @SPONSORSHIPENDDATE   DATETIME;
	DECLARE @LASTTRANACTION   NVARCHAR (100);
	DECLARE @DAYSTOCONVERT   INT;
	DECLARE @TRANSEQUENCE   INT;

	DECLARE @rglType   INT = 0;                                         -- Unknown
	DECLARE @rglConversionDate   DATE;
	DECLARE @rglDaysToConvert   INT;

	DECLARE @unknownTypeCodeValue   TINYINT = 0;
	DECLARE @directTypeCodeValue   TINYINT = 1;
	DECLARE @prospectTypeCodeValue   TINYINT = 2;
	DECLARE @conversionTypeCodeValue   TINYINT = 3;
	DECLARE @reassignedTypeCodeValue   TINYINT = 5;
	-- 2-26-16: New type Prospect Reassign
	declare @prospectReassignTypeCodeValue tinyint = 6;

	DECLARE @rglStatusActive   TINYINT = 0;
	DECLARE @rglStatusActiveTransferPending   TINYINT = 1;
	DECLARE @rglStatusActiveReassigned   TINYINT = 2;
	DECLARE @rglStatusInactive   TINYINT = 3;
	DECLARE @rglStatusCancelled   TINYINT = 6;
	DECLARE @rglStatusTerminated   TINYINT = 8;
	DECLARE @rglStatusReassigned   TINYINT = 9;

	DECLARE @addActionCode   TINYINT = 0;
	DECLARE @reassignActionCode   TINYINT = 5;

	DECLARE
	   nextSponsorshipCursor CURSOR LOCAL FAST_FORWARD FOR
		  SELECT TARGETSPONSORSHIPID,
				 REVENUEID,
				 TARGETINITIALSTATUS,
				 TARGETCONVERSIONDATE,
				 TARGETACTIONCODE,
				 MINSTARTDATE,
				 SPONSORID,
				 lastSponsorshipId
			FROM dbo.USR_RGLTABLE tt
		   WHERE tt.TARGETINITIALSTATUS = 'Prospect Sponsored'

	OPEN nextSponsorshipCursor;

	FETCH NEXT FROM nextSponsorshipCursor
		 INTO @TARGETSPONSORSHIPID,
			  @REVENUEID,
			  @INITIALSTATUS,
			  @CONVERSIONDATE,
			  @TARGETACTIONCODE,
			  @SPONSORSHIPSTARTDATE,
			  @SPONSORID,
			  @lastSponsorshipId

	-- cursor loop, for the given commitment and child:
	-- if INITIALSTATUS = 'Prospect Sponsored' and CONVERSIONDATE is null
	--   check for any other sponsorships, for the given commitment and child,
	--     that have INITIALSTATUS = 'Prospect Sponsored'
	--  we are done looping when we finally either:
	--   find a record with a Conversion Date value, *OR*
	--   find a record with an INITIALSTATUS <> 'Prospect Sponsored', if this is found, **THROW EXCEPTION!**, *OR*
	--   find NO more Sponsorships for the given commitment and child:
	DECLARE @isConverted   BIT = 0;
	DECLARE @isException   BIT = 0;
	DECLARE @isNoMore   BIT = 0;
	DECLARE @nextCount   INT = 0;
	DECLARE @doneChecking   BIT = 0;
	DECLARE @conversionDateValue   DATE;
	DECLARE @startDate   DATE;
	DECLARE @lastInitStatus nvarchar(max) = null;
	
	while (@@FETCH_STATUS = 0) 
	begin
		--print 'checking the Prospect Sponsored...';
		set @SPONSORLOOKUPID = null;
		
		-- get the @SPONSORLOOKUPID value from the sponsorid:
		select @SPONSORLOOKUPID = LOOKUPID
		from dbo.CONSTITUENT 		
		where ID = @SPONSORID;
		
		--print @SPONSORLOOKUPID;
		----print @COMMITMENTLOOKUPID;
		--print '';
		
		set @isConverted = 0;
		set @isException = 0;
		set @isNoMore = 0;
		set @nextCount = 0;
		set @doneChecking = 0;
		set @conversionDateValue = null;
		set @startDate = null;
		set @rglType = 0;  --Unknown, let it get set below
		-- 2-26-16: added for D-01153
		set @lastInitStatus = null;
		
		-- check if this has a conversion associated with the last sponsorship, if there's not a conversion
		--   of the target sponsorship:
		if @CONVERSIONDATE is null
			begin
				--print '@CONVERSIONDATE is null, looking for a value in @LASTCONVERSIONDATE';
								
				select	@LASTCONVERSIONDATE = CONVERSIONDATE,
						@lastInitStatus = initial.[description]
				from dbo.USR_SPONSORSHIPEXTENSION
				left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
				where dbo.USR_SPONSORSHIPEXTENSION.ID = @lastSponsorshipId;				
				
				-- 2-26-16 Memphis added for D-01153 Unpaid Transfer issue:
				if @lastInitStatus is not null and @LASTCONVERSIONDATE is not null
					begin
						--print 'checking if this is an unpaid transfer, if so, need to find another conversion...';
						-- check if this is an unpaid transfer, if so, need to find another conversion:
						if lower(@lastInitStatus) = 'unpaid transfer'
							begin
								--print 'this *IS* an Unpaid Transfer, need to find another conversion...';
								set @LASTCONVERSIONDATE = null;
							end
					end
				
				--print '@LASTCONVERSIONDATE: ' + cast(@LASTCONVERSIONDATE as nvarchar(20));
			end
		
		
		-- first check if this has a conversion date, if so, then we're done:
		if (@CONVERSIONDATE is not null or @LASTCONVERSIONDATE is not null)
			begin
				--print 'This Prospect Sponsored is converted!';
				--print '@SPONSORLOOKUPID: ' + @SPONSORLOOKUPID;
				--print '@TARGETACTIONCODE: ' + cast(@TARGETACTIONCODE as nvarchar(10));
				
				--print 'CONVERSIONDATE: ' + cast(ISNULL(@CONVERSIONDATE, @LASTCONVERSIONDATE) as nvarchar(100));
				--print '@SPONSORSHIPSTARTDATE: ' + cast(@SPONSORSHIPSTARTDATE as nvarchar(20));
				
				-- set the RGL values based on this conversion of the commitment:
				-- RGL Type = Conversion, ConversionDate = ConversionDate, DaysToConvert value:
				-- v7 of workflow, rgl Type is based on Target Action Code of Add or Reassign:
				if @TARGETACTIONCODE = @addActionCode
					begin
						--print 'this is a Target Action of ADD.';
						set @rglType = @conversionTypeCodeValue;
					end
					
				if @TARGETACTIONCODE = @reassignActionCode
					begin
						--print 'this is a Target Action of REASSIGN.';
						set @rglType = @reassignedTypeCodeValue;
					end
				
				set @rglConversionDate = @conversionDateValue;
				set @rglDaysToConvert = datediff(dd, @SPONSORSHIPSTARTDATE, ISNULL(@CONVERSIONDATE, @LASTCONVERSIONDATE));
				
				--print '@rglDaysToConvert: ' + cast(@rglDaysToConvert as nvarchar(10));
				--print '@rglType: ' + cast(@rglType as nvarchar(10));

				-- don't need to check any further:
				set @doneChecking = 1;
				
				-- put these values into dbo.USR_RGLTARGETTABLE so the insert below will be accurate for this commitment
				update dbo.USR_RGLTABLE
				set TARGETCONVERSIONDATE = ISNULL(@CONVERSIONDATE, @LASTCONVERSIONDATE),
					DAYSTOCONVERT = @rglDaysToConvert, --datediff(dd, @SPONSORSHIPSTARTDATE, @conversionDateValue),
					RGLTYPE = @conversionTypeCodeValue
				--where SPONTRANID = @SPONTRANID;
				where REVENUEID = @REVENUEID;

				--print '';
				--print @@ROWCOUNT;
				--print 'records updated';				
				--print '';
			end
		else
			begin
				--print 'NOT Converted, so checking other items...';
				-- check if there are any more sponsorships for this commitment at all:
				if not exists (select 1 from dbo.sponsorship s
							left join dbo.revenuesplit rs on rs.ID = s.REVENUESPLITID 
							left join dbo.revenue r on r.ID = rs.REVENUEID 
							--where sponex.ID is not null 
							where s.ID <> @TARGETSPONSORSHIPID
							and r.ID = @REVENUEID
							)
					begin
						-- we don't have any more sponsorships for this commitment!
						--print 'No more records for this Prospect Sponsored...';
						set @isNoMore = 1;
						set @doneChecking = 1;
					end
				else
					begin
						-- if there ARE more sponsorships, then check for one of these conditions:
						--print 'checking the Prospect Sponsored Target: looking for a record with a Conversion Date value...';
						-- find a record with a Conversion Date value
						select	@conversionDateValue = sponex.CONVERSIONDATE,
								@startDate = s.STARTDATE
						from dbo.sponsorship s
						left join dbo.USR_SPONSORSHIPEXTENSION sponex on sponex.ID = s.ID --and sponex.ISCURRENT = 1
						left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
						left join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE [current] on [current].ID = CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID
						left join dbo.revenuesplit rs on rs.ID = s.REVENUESPLITID 
						left join dbo.revenue r on r.ID = rs.REVENUEID 
						where sponex.ID is not null 
						and s.ID <> @TARGETSPONSORSHIPID
						and r.ID = @REVENUEID
						and CONVERSIONDATE is not null 
						and initial.description in ('Prospect Sponsored', 'Prospect Transfer')
									
						if @conversionDateValue is not null
							begin
								-- we found a conversion for this commitment!
								--print 'Found a Conversion! ';
								--print '@conversionDateValue: ' + cast(@conversionDateValue as nvarchar(100));
								--print '@startDate: ' + cast(@startDate as nvarchar(20));
								
								set @isConverted = 1;
								set @doneChecking = 1;
							end
						else
							begin
								-- check if we found a record at all:
								if exists (select 1
									from dbo.sponsorship s
									left join dbo.USR_SPONSORSHIPEXTENSION sponex on sponex.ID = s.ID --and sponex.ISCURRENT = 1
									left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
									left join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE [current] on [current].ID = CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID
									left join dbo.revenuesplit rs on rs.ID = s.REVENUESPLITID 
									left join dbo.revenue r on r.ID = rs.REVENUEID 
									where sponex.ID is not null 
									and s.ID <> @TARGETSPONSORSHIPID
									and r.ID = @REVENUEID
									--and CONVERSIONDATE is not null 
									and initial.description in ('Prospect Sponsored', 'Prospect Transfer')
								)
									begin
										--print 'we found another sponsorship that is either Prospect Sponsored or Prospect Transfer.';
										-- we found another sponsorship that is either Prospect Sponsored or Prospect Transfer
										set @isConverted = 0;
										set @doneChecking = 1;
									end
							end
						

						if @doneChecking = 0
							begin
								--print 'finding record for INITIALSTATUS <> Prospect Sponsored...';
								-- didn't find what we wanted up above, so now check for a record with an INITIALSTATUS <> 'Prospect Sponsored':
								if exists (select 1 from dbo.sponsorship s
											left join dbo.USR_SPONSORSHIPEXTENSION sponex on sponex.ID = s.ID --and sponex.ISCURRENT = 1
											left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
											left join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE [current] on [current].ID = CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID
											left join dbo.revenuesplit rs on rs.ID = s.REVENUESPLITID 
											left join dbo.revenue r on r.ID = rs.REVENUEID 
											where sponex.ID is not null 
											and s.ID <> @TARGETSPONSORSHIPID
											and r.ID = @REVENUEID
											and (initial.description is not null and initial.description <> 'Prospect Sponsored')
											)
									begin
										-- we found an exception for this commitment!
										--print 'We found an Exception!  ';
										----print @SPONCOMMITMENTID;
										
										set @isException = 1;
										set @doneChecking = 1;
									end
								
							end
							
					end -- if there are more records or not

				-- process the results from above:
				if @doneChecking = 0
					begin
						-- not sure what to do here, this really should never happen!
						set @isException = 1;
					end
				
				if @isException = 1
					begin
						-- put this record into some place to notify Pamela:
						-- @TARGETSPONSORSHIPID, @REVENUEID, @INITIALSTATUS, @CONVERSIONDATE, @TARGETACTIONCODE
				   INSERT
					 INTO dbo.USR_RGL_POPULATION_EXCEPTION (RGID,
															SPONSORLOOKUPID,
															TARGETSPONSORSHIPID,
															INITIALSTATUS,
															CONVERSIONDATE,
															TARGETACTIONCODE,
															INSERTDATE)
				   VALUES (@REVENUEID,
						   @SPONSORLOOKUPID,
						   @TARGETSPONSORSHIPID,
						   @INITIALSTATUS,
						   @CONVERSIONDATE,
						   @TARGETACTIONCODE,
						   @dateAdded)
				END
					
				if @isConverted = 1
					begin
						-- set the RGL values based on this conversion of the commitment:
						-- RGL Type = Conversion, ConversionDate = ConversionDate, DaysToConvert value:
						set @rglType = @conversionTypeCodeValue;
						set @rglConversionDate = @conversionDateValue;
						--set @rglDaysToConvert = datediff(dd, @startDate, @conversionDateValue);
						set @rglDaysToConvert = datediff(dd, @SPONSORSHIPSTARTDATE, @conversionDateValue);
						
						--print '@rglDaysToConvert: ' + cast(@rglDaysToConvert as nvarchar(10));
						
						-- put these values into dbo.USR_RGLTARGETTABLE so the insert below will be accurate for this commitment
						update dbo.USR_RGLTABLE
						set TARGETCONVERSIONDATE = @conversionDateValue,
							DAYSTOCONVERT = @rglDaysToConvert,  --datediff(dd, @startDate, @conversionDateValue),
							RGLTYPE = @conversionTypeCodeValue
						--where SPONTRANID = @SPONTRANID;
						where REVENUEID = @REVENUEID;
						
						--print @@ROWCOUNT;
						--print 'records updated';
						
					end
					
				if (@isNoMore = 1 or (@isConverted = 0 and @doneChecking = 1))
					begin
						--print 'Either no more sponsorship records and this was NOT converted, or found another record that is still Prospect!';
						--print 'Setting rglType accordingly:';
						
						-- set the RGl values based on the fact that there are no more sponsorships:
						-- set RGL Type to Prospect, ConversionDate = NULL, DaysToConvert = NULL
						-- v7 of workflow, rgl Type is based on Target Action Code of Add or Reassign:
						-- 2-26-16 v9 now adds a new type of Prospect Reassign if not converted and is a Reassign:
						set @rglType = (case when @TARGETACTIONCODE = @addActionCode then @prospectTypeCodeValue
												--when @TARGETACTIONCODE = @reassignActionCode then @reassignedTypeCodeValue	
												when @TARGETACTIONCODE = @reassignActionCode then @prospectReassignTypeCodeValue										 
												else @prospectTypeCodeValue
										end);
																
						--print '@rglType: ' + cast(@rglType as nvarchar(10));
						
						set @rglConversionDate = null;
						set @rglDaysToConvert = null;

						-- put these values into dbo.USR_RGLTARGETTABLE so the insert below will be accurate for this commitment
						update dbo.USR_RGLTABLE
						set TARGETCONVERSIONDATE = null,
							DAYSTOCONVERT = 0,  --null not allowed
							RGLTYPE = @rglType --@prospectTypeCodeValue
						--where SPONTRANID = @SPONTRANID;
						where REVENUEID = @REVENUEID;

						--print @@ROWCOUNT;
						--print 'records updated';
					end
			end

		fetch next from nextSponsorshipCursor into @TARGETSPONSORSHIPID, @REVENUEID, @INITIALSTATUS, @CONVERSIONDATE, @TARGETACTIONCODE,@SPONSORSHIPSTARTDATE,@SPONSORID,@lastSponsorshipId
	end

	close nextSponsorshipCursor;
	deallocate nextSponsorshipCursor;


	BEGIN TRY
	   BEGIN TRANSACTION insertTrans

	   DECLARE @CHANGEAGENTID   UNIQUEIDENTIFIER = NULL;

	   IF @CHANGEAGENTID IS NULL
		  EXEC dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID OUTPUT;

	   --  Comment this out for now, while testing so don't insert:
	   INSERT INTO dbo.USR_COMMITMENTLINE_RECURRINGGIFT(
		   ID
		  ,SPONSORID
		  ,STARTDATE
		  ,ENDDATE
		  ,TYPECODE
		  ,ISREASSIGN
		  ,SOURCE
		  ,SOURCECATEGORY
		  ,PACKAGE
		  ,INBOUNDCHANNEL
		  ,CONVERSIONDATE
		  ,DAYSTOCONVERT
		  ,STATUSCODE
		  ,CANCELSPONSORSHIPREASONID
		  ,FINANCIALSPONSORID
		  ,ISACCOUNTCORRECTION
		  ,ADDEDBYID
		  ,CHANGEDBYID
		  ,DATEADDED
		  ,DATECHANGED
		  ,RECURRINGGIFTID
		) 
		select distinct --top 500
		   newid()				-- ID - uniqueidentifier
		  ,SPONSORID			-- SPONSORID - uniqueidentifier
		  ,MINSTARTDATE --,SPONSORSHIPSTARTDATE	-- STARTDATE - date
		  ,lastSponEndDate --,SPONSORSHIPENDDATE	-- ENDDATE - date
		  ,case when (RGLTYPE is null or RGLTYPE = 0) 
			then (case when (TARGETINITIALSTATUS = 'Prospect Sponsored' and TARGETCONVERSIONDATE is not null) then @conversionTypeCodeValue
							  when (TARGETINITIALSTATUS = 'Sponsored') then (case when TARGETACTIONCODE = @reassignActionCode then @reassignedTypeCodeValue else @directTypeCodeValue end)
				else @unknownTypeCodeValue     -- TYPECODE - tinyint
			end)
				else RGLTYPE
			end
		  ,0				-- ISREASSIGN - bit
		  ,case when APPEALSOURCE is null then ''		-- SOURCE - nvarchar(100)
				else APPEALSOURCE
			end
		  ,case when (APPEALCATEGORY like '%fundraiser%') then LTRIM(substring(APPEALCATEGORY, (CHARINDEX('-', APPEALCATEGORY)) + 1, 100))	-- SOURCECATEGORY - nvarchar(100)
				else APPEALCATEGORY
			end
		  ,case when APPEALNAME is null then '' 
				else APPEALNAME		-- PACKAGE - nvarchar(100)
			end
		  ,case when INBOUNDCHANNEL is not null then INBOUNDCHANNEL	-- INBOUNDCHANNEL - nvarchar(100)
				else ''
			end
		  ,TARGETCONVERSIONDATE
		  ,case when (DAYSTOCONVERT is not null) then DAYSTOCONVERT
		  		else 0
			end			
		  ,case when lastSponEndDate is null then (case when lastACTIONCODE = 2 then @rglStatusCancelled
														when lastACTIONCODE = 3 then @rglStatusTerminated
														when lastACTIONCODE = 5 then @rglStatusActiveReassigned
														when lastACTIONCODE = 6 then @rglStatusActiveTransferPending
														when lastACTIONCODE = 8 then @rglStatusActive
														else @rglStatusActive  -- change to 0, status of Active  
													  end)
				when lastSponEndDate is not null then (case when lastACTIONCODE = 2 then @rglStatusCancelled
															when lastACTIONCODE = 3 then @rglStatusTerminated
															when lastACTIONCODE = 5 then @rglStatusReassigned
															--when lastACTIONCODE = 6 then @rglStatusActiveTransferPending
															--when lastACTIONCODE = 8 then @rglStatusActive
															else @rglStatusInactive  -- change to 3, status of Inactive  
														  end)
			end		-- STATUSCODE - tinyint			
		  ,case when lastSponEndDate is not null then lastSponReasonId		-- CANCELSPONSORSHIPREASONID - uniqueidentifier
				else null
			end
		  ,case when createGiftSponsor is not null then createGiftSponsor -- FINANCIALSPONSORID - uniqueidentifier
				else null
			end
		  ,case when TARGETACCOUNTCORRECTION is not null then TARGETACCOUNTCORRECTION    -- ISACCOUNTCORRECTION - bit
				else 0
			end
		  ,@CHANGEAGENTID	-- ADDEDBYID - uniqueidentifier
		  ,@CHANGEAGENTID	-- CHANGEDBYID - uniqueidentifier
		  ,getdate()		-- DATEADDED - datetime
		  ,getdate()		-- DATECHANGED - datetime
		  ,REVENUEID		-- RECURRINGGIFTID - uniqueidentifier
		from dbo.USR_RGLTABLE
		   WHERE NOT EXISTS
					(SELECT 1
					   FROM dbo.USR_COMMITMENTLINE_RECURRINGGIFT
					  WHERE RECURRINGGIFTID = REVENUEID)


	   COMMIT TRANSACTION insertTrans
	   
	   -- get the count inserted:
	   select @successCounter = count(*)
	   from dbo.USR_COMMITMENTLINE_RECURRINGGIFT;
	   
	   -- get the count of exceptions:
	   select @exceptionCounter = count(*)
	   from dbo.USR_RGL_POPULATION_EXCEPTION
	   where INSERTDATE = @dateAdded;
	   
		set @successCounterOutput = @successCounter;
		set @exceptionCounterOutput = @exceptionCounter;	   
	END TRY
	
	BEGIN CATCH
	   ROLLBACK TRANSACTION insertTrans
	   DECLARE @ErrMsg AS NVARCHAR (MAX);
	   DECLARE @ErrSeverity   INT;
	   -- Raise an error with the details of the exception
	   SELECT @ErrMsg = ERROR_MESSAGE (),
			  @ErrSeverity = ERROR_SEVERITY ()

	   RAISERROR (@ErrMsg, @ErrSeverity, 1)
	END CATCH

end


		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
