<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="90823d97-3945-47f0-b863-e286e66ebefe"
	Name="USR_USP_D2_CAMPAIGN_BUSINESSPROCESS"
	Description="D2 Campaign stored procedure used for the business process."
	Author="Memphis Sellers"
	SPName="USR_USP_D2_CAMPAIGN_BUSINESSPROCESS"
	GrantServiceRolePermission="true"
	>

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_D2_CAMPAIGN_BUSINESSPROCESS (
	@CAMPAIGNTYPE tinyint,
	@changeAgentID uniqueidentifier,
	@outputTableName nvarchar(100),
	@successCount int = 0 output,
	@exceptionCount int = 0 output
)
as
begin
	-- do work
	/*
	D2 Campaign biz process SQL:
	 - A. Get qualifying sponsors
	 - B. Build a list of the delinquent children for each sponsor
	 - C. Setup the interaction parameters specific to the payment method and solicit codes (per sponsor)
	 - D. create interactions passing in the parameters set above & child list (declare @childIDList dbo.USR_UDT_CHILDIDLIST)

	Each campaign is separate based on the payment method of the delinquent child's sponsorship:
	 - Cash
	 - EFT Active
	 - EFT Held
 
	*/

	-- passed in by the pre-process edit form:
	--declare @campaignType tinyint = 2;  -- 0=Cash, 1=EFT Active, 2=EFT Held

	--if @campaignType = 0
	--	----print 'This is the CASH CAMPAIGN!';
	
	--if @campaignType = 1
	--	--print 'This is the EFT ACTIVE CAMPAIGN!';

	--if @campaignType = 2
	--	--print 'This is the EFT HELD CAMPAIGN!';


	/*
	 - this parameter (above) to the sproc will determine which campaign to run
	 */

	--declare @CHANGEAGENTID uniqueidentifier
	if @CHANGEAGENTID is null
			exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @CHANGEAGENTID output;

	declare @currentDate date = Cast(GETDATE() as date)

	declare @childIDList dbo.USR_UDT_CHILDIDLIST;

	-- **** NOTE: THIS IS FOR TESTING ONLY ****
	declare @constituentId uniqueidentifier = '3AEA7B94-DE6F-483A-A29C-00279FDD4922';				
	declare @doNotContactSolicitCodeId uniqueidentifier;
	declare @affiliateOfficeId uniqueidentifier;
	declare @sponsorLookupId nvarchar(10);

	select @affiliateOfficeId = ID
	from dbo.CONSTITUENCYCODE
	where lower([DESCRIPTION]) = LOWER('Affiliate Office')

	select @doNotContactSolicitCodeId = ID
	from dbo.SOLICITCODE
	where LOWER([DESCRIPTION]) = LOWER('do not solicit') -- lower('Do not contact')

	-- Try to lookup ids
	--exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @subcategoryID output, @categoryName, @subcategoryName, @raiseErrorIfNotFound_True

	declare @subcategoryID uniqueidentifier;

	declare @interactionContactMethodId uniqueidentifier;
	declare @phoneContactMethodID uniqueidentifier;
	declare @emailContactMethodID uniqueidentifier;

	-- Phone
	select @phoneContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower ('Phone')
	-- Email
	select @emailContactMethodID = ID from dbo.INTERACTIONTYPECODE where lower(DESCRIPTION) = lower ('Email')

	declare @interactionCategoryId uniqueidentifier;
	select @interactionCategoryId = ID from dbo.INTERACTIONCATEGORY where LOWER(NAME) = LOWER('Sponsorship Delinquency')

	-- cash subcategory: Delinquent 2 Month - Non-EFT
	-- active eft NOT HELD subcategories:
	 -- Delinquent 2 Month - Credit Card
	 -- Delinquent 2 Month - Direct Debit
	-- active eft HELD subcategory: 
	 -- Delinquent 2 Month - EFT

	declare @categoryName nvarchar(100) = 'Sponsorship Delinquency'
	declare @cashSubcategoryName nvarchar(100) = 'Delinquent 2 Month - Non-EFT';
	declare @heldEFTCreditCardSubcategoryName nvarchar(100) = 'Delinquent 2 Month - Credit Card';
	declare @heldEFTDirectDebitSubcategoryName nvarchar(100) = 'Delinquent 2 Month - Direct Debit';
	declare @activeEFTSubcategoryName nvarchar(100) = 'Delinquent 2 Month - EFT';
	declare @raiseErrorIfNotFound_True bit = 1

	declare @writeToExceptionLog bit = 0;		-- flag to identify when to write a record to the output table indicating no interaction was created

	declare @subcategoryName nvarchar(100);		-- will hold one of the category name values above based on campaign type

	if @campaignType = 0 -- cash
		set @subcategoryName = @cashSubcategoryName;

	if @campaignType = 1 -- eft active
		set @subcategoryName = @activeEFTSubcategoryName;


	declare @contactMethodDesc_Phone nvarchar (100) = 'Phone';
	declare @contactMethodDesc_Email nvarchar (100) = 'Email';
	declare @contactMethodDesc nvarchar(100);   -- this will get populated by either of the above values before creating the interaction

	declare @expectedDate date = cast(getdate() as date);

	-- Response Category descriptions
	declare @interactionResponseCategory_DonorContact nvarchar(100) = 'Donor Contact'
	declare @interactionResponseCategory_LeftMessage nvarchar(100) = 'Left Message'
	declare @interactionResponseCategory_MessageType nvarchar(100) = 'Message Type'
	declare @interactionResponseCategory_Cancelled nvarchar(100) = 'Cancelled'

	declare @interactionResponseCategory_EFTReceived nvarchar(100) = 'EFT Received'
	declare @interactionResponse_No nvarchar(100) = 'No';
	declare @interactionResponse_None nvarchar(100) = 'None';
	declare @interactionOwner uniqueidentifier = null;  -- this will hold the @callCenterManagerConstituentID if a Phone Call type of interaction

	declare @callCenterManagerConstituentID uniqueidentifier = 'B25168DC-4DD4-46ED-B4DD-C5A26A965667';	-- This constituent is hard coded via a script
	declare @sponsorInteractionId uniqueidentifier;

	begin try
		if @doNotContactSolicitCodeId is null
			raiserror 100000 'Unable to locate solicit code: Do Not Contact! Unable to continue.'

		if @affiliateOfficeId is null
			raiserror 100000 'Unable to locate constituency code: Affiliate Office! Unable to continue.'
				
		if @phoneContactMethodID is null 
			RAISERROR 1000000 'Unable to locate the contact method: Phone.'
		
		if @emailContactMethodID is null
			RAISERROR 1000000 'Unable to locate the contact method: Email.'
		
		if @interactionCategoryId is null
			RAISERROR 1000000 'Unable to locate the interaction category: Sponsorship Delinquency.'

	end try

	begin catch
		exec dbo.USP_RAISE_ERROR
	end catch

	begin try
		--'First Day of Previous Month'
		declare @firstDayPreviousMonth date;
		set @firstDayPreviousMonth =  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)

		--'First Day of 2 Months ago'
		declare @secondDayTwoMonthsAgo date;
		set @secondDayTwoMonthsAgo =  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 2, 0)
		set @secondDayTwoMonthsAgo = DATEADD(DAY, 1, @secondDayTwoMonthsAgo)

		----print @firstDayPreviousMonth;
		----print @secondDayTwoMonthsAgo;

		declare @d2ResultsTable table (CHILDID uniqueidentifier, REVENUESPLITID uniqueidentifier, SPONSORID uniqueidentifier, NTD date, PAYMETHOD tinyint, SPONSORSHIPREVENUEID uniqueidentifier, ISHELD bit);
		declare @childId uniqueidentifier, @revenueSplitId uniqueidentifier, @sponsorId uniqueidentifier, @NTD date, @payMethod tinyint, @sponsorshipRevenueId uniqueidentifier, @isHeld bit;

		set @payMethod = 99;  -- default to neither cash nor eft

		-- constants used for checking what payment type is this sponsorship:
		declare @CASHPAYMENT_VALUE tinyint = 0;
		declare @EFTPAYMENT_VALUE tinyint = 1;


		-- ******************** A. Get qualifying sponsors  **********************************

		/*
		 -- Get the financial sponsors that:
			1.1
			 Do NOT have a solicit code of “Do not contact”.
			1.2
			 Do NOT have any interaction with a completed Category of Sponsorship Delinquency in the previous month (based on Expected date).
			1.3
			 Do NOT have the constituency code of “Affiliate Office”?
		*/
		-- first get the sponsors that meet 1.1 - 1.3
		;with D2SponsorList (sponsorId)
		as
		(
			select distinct dbo.SPONSORSHIP.CONSTITUENTID
			from dbo.SPONSORSHIP
			left join dbo.CONSTITUENTSOLICITCODE on dbo.CONSTITUENTSOLICITCODE.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID and ((SOLICITCODEID is not null and SOLICITCODEID <> @doNotContactSolicitCodeId) and (dbo.CONSTITUENTSOLICITCODE.ENDDATE is null or dbo.CONSTITUENTSOLICITCODE.ENDDATE < GETDATE()))
			left join dbo.CONSTITUENCY on dbo.CONSTITUENCY.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID and ((dbo.CONSTITUENCY.CONSTITUENCYCODEID is not null and dbo.CONSTITUENCY.CONSTITUENCYCODEID <> @affiliateOfficeId) and (dbo.CONSTITUENCY.DATETO is null or dbo.CONSTITUENCY.DATETO < GETDATE()))
			where not exists (select 1
				from dbo.INTERACTION
				where (dbo.INTERACTION.INTERACTIONSUBCATEGORYID in (select ID from dbo.INTERACTIONSUBCATEGORY where dbo.INTERACTIONSUBCATEGORY.INTERACTIONCATEGORYID IN 
					(select ID from dbo.INTERACTIONCATEGORY where LOWER(NAME) = LOWER('Sponsorship Delinquency')))
				and (dbo.INTERACTION.CONSTITUENTID = dbo.SPONSORSHIP.CONSTITUENTID
				and (DATEPART(m, EXPECTEDDATE) = DATEPART(m, DATEADD(m, -1, getdate()))
				AND YEAR(EXPECTEDDATE) = YEAR(DATEADD(m, -1, getdate())))))
				)
		)
		/*
			1.4
			 Has child sponsorship one of “Active”, “Active (transfer pending)” or “Active (reassign)”
			1.5
			 The current sponsorship status for the child must be “Sponsored”
			1.6
			 The recurring gift NTD>= 1st of the month 2 months back
			  NTD is between 1st day of current month -1 and 2nd day of current month -2, INCLUSIVE
			  -- <=1st day of current month -1 and >= 2nd day of current month -2
				(For example, currentNTDis 5/1/13 then the date range used would be 3/2/13 to 4/1/2013)	 
		*/

		/*  dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID
		[PAYMENTMETHODCODE] (0) = 'Cash' (1) ='Check' (2) ='Credit card' (3) ='Direct debit' 
		(4) ='Stock' (5) ='Property' (6) ='Gift-in-kind' (9) ='None' (10) ='Other' 
		(11) ='Standing order'  
		*/


		-- then get the children for each sponsor that meet 1.4-1.6
		, D2ChildrenList (childId, revenueSplitId, sponsorId, payMethod, sponsorshipRevenueId, isHeld)
		as
		(
			select dbo.SPONSORSHIP.SPONSORSHIPOPPORTUNITYID,
				   dbo.SPONSORSHIP.REVENUESPLITID,
				   dbo.SPONSORSHIP.CONSTITUENTID,
				   -- *** INSERT THE NEW UFN FOR GETTING THE PAYMETHOD OF THE SPONSORSHIP ***:
				   dbo.USR_UFN_GET_PAYMENTMETHODCODE_BY_REVENUESPLITID(dbo.SPONSORSHIP.REVENUESPLITID) as PAYMETHOD,
				   (select REVENUEID from dbo.REVENUESPLIT where ID = dbo.SPONSORSHIP.REVENUESPLITID) as SPONSORSHIPREVENUEID,
				   dbo.USR_UFN_CHECK_RECURRINGGIFT_ISHELD(dbo.SPONSORSHIP.REVENUESPLITID) as ISHELD  -- 0 false, 1 true
			from dbo.SPONSORSHIP
			join dbo.USR_SPONSORSHIPEXTENSION se on se.ID = dbo.SPONSORSHIP.ID
			join dbo.USR_CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODE statusCode on statusCode.ID = se.CURRENTOPPORTUNITYSPONSORSHIPSTATUSCODEID and statusCode.DESCRIPTION = 'Sponsored'
			where (CONSTITUENTID IN (select sponsorId from D2SponsorList)
			and STATUSCODE = 1   -- status of 'Active'
			)
		)
		-- ************   I THINK this is where we filter out the records based on the campaign type passed in! *********************
		insert into @d2ResultsTable
		select childId
			   , revenueSplitId
			   , sponsorId
			   , case when REVENUESCHEDULE.NEXTTRANSACTIONDATE > REVENUESCHEDULE.ENDDATE then null else REVENUESCHEDULE.NEXTTRANSACTIONDATE end as 'NTD'
			   , payMethod
			   , sponsorshipRevenueId
			   , isHeld
		from D2ChildrenList
		--join dbo.REVENUESPLIT rs on rs.ID = revenueSplitId
		--join dbo.REVENUE on dbo.REVENUE.ID = rs.REVENUEID
		inner join dbo.REVENUESCHEDULE on REVENUESCHEDULE.ID = sponsorshipRevenueId --REVENUE.ID
		where ((case when REVENUESCHEDULE.NEXTTRANSACTIONDATE > REVENUESCHEDULE.ENDDATE then null else REVENUESCHEDULE.NEXTTRANSACTIONDATE end) 
			between @secondDayTwoMonthsAgo and @firstDayPreviousMonth
		--and payMethod = (case when @campaignType = 0 then @CASHPAYMENT_VALUE
		--					 when @campaignType = 1 or @campaignType = 2 then @EFTPAYMENT_VALUE
		--				end)
		and isHeld = case when @campaignType in (0,1) then 0 else 1 end
		)
		order by NTD;

		-- campaignType: 0=Cash, 1=EFT Active, 2=EFT Held



		declare @solicitCodeList table (CODEDESCRIPTION nvarchar(100))
		declare @isNoEmailOrLetters bit = 0;
		declare @isNoCalls bit = 0;

		declare @interactionSummary nvarchar(100);		-- holds the value of the interaction objective, based on payment type
		declare @interactionContactMethod nvarchar(100);-- holds the contact method which is based on solicit code
		declare @interactionSubcategory nvarchar(100);	-- holds the subcategory which is based on payment type & held or not

		declare @sponsorshipPayMethod nvarchar(100);	-- holds whether this is Cash or EFT
		declare @eftType tinyint = 0;					-- holds whether this is CC (1) or Direct Debit (2), compare agains the constant values instead of the literal 1 or 2
		declare @CREDITCARD_EFTTYPE tinyint = 1;		-- constant value for CC eft type of 1, used for checking @eftTYPE values
		declare @DIRECTDEBIT_EFTTYPE tinyint = 2;		-- constant value for DirectDebit eft type of 2, used for checking @eftTYPE values
		declare @CASH_PAYMETHOD nvarchar(100) = 'CASH'	-- constant value for the CASH payment method type used for @sponsorshipPayMethod
		declare @EFT_PAYMETHOD nvarchar(100) = 'EFT'	--constant value for the EFT payment method type used for @sponsorshipPayMethod

		declare @statusCode_Pending tinyint = 1;		-- this is the one we use in the interactions created in this biz process
		declare @statusCode_Completed tinyint = 2
		declare @statusCode_Unsuccessful tinyint = 3
		declare @statusCode_Cancelled tinyint = 4
		declare @statusCode_Declined tinyint = 5

		declare @isNewSponsor bit = 0;					-- flag to keep track of when sponsor changes
		declare @currentSponsorId uniqueidentifier;		-- holds the sponsorid that was just looped in the cursor, used to identify when sponsorId changes in the cursor loop
		declare @doPhoneProcess bit = 0;				-- flag that says to perform the phone interaction workflow
		declare @createInteractions bit = 0;			-- flag to identify to create the interactions or not

		declare @childrenExistForSponsor bit = 0;		-- flag identifying if this sponsor has kids for the given campaign type:


		-- put the results into a cursor so we can create the necessary interactions, one-by-one and do all the various pieces of work required
		declare d2resultsCursor cursor local fast_forward for
		select *
		from @d2ResultsTable
		order by SPONSORID;

		open d2resultsCursor;
							
		fetch next from d2resultsCursor into @childId, @revenueSplitId, @sponsorId, @NTD, @payMethod, @sponsorshipRevenueId, @isHeld;

		-- set the new sponsor flag for the first sponsor
		set @isNewSponsor = 1;

		-- set flag identifying if this sponsor has kids for the given campaign type:
		set @childrenExistForSponsor = 0;

		-- for each Sponsor we have: 
		while (@@FETCH_STATUS = 0)
			begin
				if @isNewSponsor = 1
					begin
						--print 'new sponsor is: ' + cast(@sponsorId as nvarchar(100));
						set @createInteractions = 0;
				
						set @currentSponsorId = @sponsorId
				
						-- rebuild the solicit code stuff for the new sponsor
						-- do the work of creating interactions based on payment method, etc.
						insert @solicitCodeList
						select * from dbo.USR_UFN_GET_CONSTITUENT_SOLICITCODES_LIST(@sponsorId)

						if exists(select 1 from @solicitCodeList where lower(CODEDESCRIPTION) in ('do not email', 'no system letters'))
							set @isNoEmailOrLetters = 1;  -- true
						else 
							set @isNoEmailOrLetters = 0;  -- false

						if exists(select 1 from @solicitCodeList where lower(CODEDESCRIPTION) in ('do not call', 'no phone calls'))
							set @isNoCalls = 1;  -- true
						else
							set @isNoCalls = 0;  -- false

						--  *** B. Build a list of the delinquent children for each sponsor  ***
						--         but only do this ONCE per Sponsor!
						if @campaignType = 0  -- CASH
							begin
								insert @childIDList 
								select CHILDID
								from @d2ResultsTable 
								where (SPONSORID = @sponsorId
								and PAYMETHOD in (0,1,9))
							end
				
						if @campaignType = 1  -- EFT Active
							begin
								insert @childIDList 
								select CHILDID
								from @d2ResultsTable 
								where (SPONSORID = @sponsorId
								and PAYMETHOD in (2,3)
								and ISHELD = 0)
							end
					
						if @campaignType = 2  -- EFT Held
							begin
								insert @childIDList 
								select CHILDID
								from @d2ResultsTable 
								where (SPONSORID = @sponsorId
								and PAYMETHOD in (2,3)
								and ISHELD = 1)
							end
				
						-- this sponsor may not have children for this campaigntype, so see if there are any kids in the list:
						if exists (select 1 from @childIDList)
							begin
								set @childrenExistForSponsor = 1;
								--print 'these are the children for this sponsor: '+ cast(@sponsorId as nvarchar(100));	
								--select *
								--from @childIDList;
							end
						else
							set @childrenExistForSponsor = 0;
				
						begin transaction d2CampaignTransaction;
				
						--print 'new sponsor trxaction started...';

						-- set the sponsorship payment method
						/*
						   *********** NOTE: **********
						   when there are 2 or more delinquent recurring gifts with different pay methods - 
						   It should always default to the EFT flow charts.
				   
						  This means I need to check the paymethods of each child, and if I find an EFT, I can
						  stop looking, and set the isEFT flag or whatever I'm using.  
				  
						  @sponsorshipPayMethod can be set to either:
						  @CASH_PAYMETHOD 
						  @DIRECT_DEBIT_PAYMETHOD 		  
						*/
						--set @sponsorshipPayMethod = null;
				
						---- paymentmethodcode is 2 or 3 for an EFT type.
						--if exists (select 1 from @d2ResultsTable where (PAYMETHOD in (2,3) and SPONSORID = @sponsorId))
						--	begin
						--		--print 'sponsorshipPayMethod is EFT.';
						--		set @sponsorshipPayMethod = @EFT_PAYMETHOD;  -- constant for EFT
						--	end
				
						---- if we haven't already set the sponsorship pay method, try to set it here
						---- because it must not be EFT or it would've been set above
						--if @sponsorshipPayMethod is null
						--	begin
						--		if exists (select 1 from @d2ResultsTable where (PAYMETHOD in (0,1,9) and SPONSORID = @sponsorId))
						--			begin
						--				--print 'sponsorshipPayMethod is CASH.';
						--				set @sponsorshipPayMethod = @CASH_PAYMETHOD; -- constant for CASH
						--			end						
						--	end
				
				
						----print '-------';
						----print @sponsorshipPayMethod;
						----print '-------';
				
						--if @isHeld = 1
						--	--print 'HELD Gift!';
						--else
						--	--print 'Active Gift!';				
								
					end
		

				if @childrenExistForSponsor = 1
					begin			
						-- check if sponsor has valid primary email address:
						if dbo.USR_UFN_CONSTITUENT_HASVALID_PRIMARY_EMAIL(@sponsorId) = 1
							begin
								-- check if 2.3 Does the financial sponsor have one or more of the solicit codes: 
								-- Do not email, No System Letters
								if @isNoEmailOrLetters = 1
									begin
										--print 'do not email this sponsor, check for phone call process...';
										set @doPhoneProcess = 1;
										set @createInteractions = 0;
									end
								else
									begin
										set @doPhoneProcess = 0;
										-- 2.4 create the email interaction:
										/*
										Summary = Active – D2 Campaign
										Status = Pending
										Category = Sponsorship Delinquency
										Subcategory = Delinquent 2 Month – Non-EFT
										Expected date = today’s date
										Contact Method = Email
								
										Interaction Extension Fields:
										Children = Add only the delinquent child(ren) to the Children grid
										ChildCountLetterVersionCodeID = # children in Children grid
										*/
								
										-- **** Set the interaction summary based on the campaign type:
										set @interactionSummary = case when @campaignType = 0 then 'Cash – D2 Campaign'
											when @campaignType = 1 then 'Active EFT – D2 Campaign'
											when @campaignType = 2 then 'Held EFT – D2 Campaign' end;
								
										set @interactionContactMethodId = @emailContactMethodID;
								
										--print @interactionSummary;
								
										set @createInteractions = 1;
										set @writeToExceptionLog = 0;
									end
						
							end
						else
							-- sponsor does not have a valid primary email, so do tests for phone interaction
							begin
								--2.6 goes here
								--print 'setting @doPhoneProcess flag to do 2.6...';
								set @doPhoneProcess = 1;
								set @writeToExceptionLog = 0;
							end

						if @doPhoneProcess = 1
							begin
								--2.6, 3.4
								--Does the financial sponsor have one of the solicit codes:
								--	Do not call,
								--	No Phone Calls
								if @isNoCalls = 0
									-- this is where the real work starts:
									begin
										-- 2.7 create the phone call interaction...
										/*
										Summary = Cash – D2 Campaign
										Status = Pending
										Category = Sponsorship Delinquency
										Subcategory = Delinquent 2 Month – Non-EFT
										Expected date = today’s date
										Contact Method = Phone
										Owner = Call Center Manager
								
										Interaction Extension Fields:
										Children = Add only the delinquent child(ren) to the Children grid.
								
										Interaction Responses:
										Donor Contact = No
										EFT Received = No
										Left Message = No
										Message Type = None
										Cancelled = No						
										*/
										set @interactionSummary = case when @campaignType = 0 then 'Cash – D2 Campaign'
											when @campaignType = 1 then 'Active EFT – D2 Campaign'
											when @campaignType = 2 then 'Held EFT – D2 Campaign' end;
										set @interactionContactMethodId = @phoneContactMethodID;

										--print @interactionSummary;
								
										set @createInteractions = 1;
										set @writeToExceptionLog = 0;
									end
								else
									begin
										-- 2.8 do not create interactions
										--print '2.8 setting flag to not create interactions';
										set @createInteractions = 0;
										set @writeToExceptionLog = 1;
									end
							end
					
							if @createInteractions = 1
								begin
									-- create the interactions here
									--print '****'
									--print 'going to create the interactions now...';
									-- set the subcategory name based on payment method if this is eft held:
									-- (2) ='Credit card' (3) ='Direct debit' 
									if @campaignType = 2
										set @subcategoryName = case when @payMethod = 3 then @heldEFTDirectDebitSubcategoryName
																	when @payMethod = 2 then @heldEFTCreditCardSubcategoryName
															   end;
							
									exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @subcategoryID output, @categoryName, @subcategoryName, @raiseErrorIfNotFound_True
								
									--print @interactionSummary;
									--print @subcategoryID;
							
									if @doPhoneProcess = 1
										set @contactMethodDesc = @contactMethodDesc_Phone;
									else
										set @contactMethodDesc = @contactMethodDesc_Email;
							
									if @doPhoneProcess = 1
										-- the owner is needed for the interaction
										set @interactionOwner = @callCenterManagerConstituentID;
									else
										set @interactionOwner = null;
							
									exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
											@id = @sponsorInteractionId output,
											@constituentID = @sponsorId,
											@summary = @interactionSummary,
											@categoryName = @categoryName,
											@subcategoryName = @subcategoryName,
											@expectedDate = @expectedDate,
											@owner = @interactionOwner,
											@contactMethodDesc = @contactMethodDesc,
											@comment = '',                                                                      
											@letterTypeDesc = '',
											@fulfillmentStatusDesc = '',
											@eftBrochureCode = 0,
											@resendCode = 0,
											@changeAgentID = @CHANGEAGENTID  
							
									-- add the delinquent children to the interaction just created:
									if @sponsorInteractionId  is not null
										begin
											exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
												@interactionID = @sponsorInteractionId,
												@childIDList = @childIDList,
												@changeAgentID = null
												
											--increment the successcounter
											set @successCount = @successCount + 1;

											select @sponsorLookupId = LOOKUPID
											from dbo.CONSTITUENT
											where ID = @sponsorId;
				
											if @sponsorLookupId is not null
												begin
													insert into dbo.USR_D2_CAMPAIGN_BUSINESSPROCESS_RESULTS 
														(SPONSORLOOKUPID
														, D2CAMPAIGNDATE
														, CAMPAIGNTYPE
														, D2INTERACTIONSTATUS
														, ADDEDBYID
														, DATEADDED
														, CHANGEDBYID
														, DATECHANGED
														)
													values 
														(@sponsorLookupId
														, CAST(GETDATE() as date)
														, @CAMPAIGNTYPE
														, @contactMethodDesc + ' interaction created'
														, @changeAgentID
														, @currentDate
														, @changeAgentID
														, @currentDate
														);
												end
										end
							
									-- if this is a Phone type of interaction, add the responses:
									/*
									Interaction Responses:
										Donor Contact = No
										EFT Received = No
										Left Message = No
										Message Type = None
										Cancelled = No
									*/
									if @doPhoneProcess = 1
										begin
											--print '';
											--print 'Phone call interaction so adding responses...';
									
											-- add responses:
											if @sponsorInteractionId  is not null
												begin
													-- NOTE: the child will be added in the children cursor loop below, based on the createWelcomeGreetingInteraction bit flag!
											
													exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
																	@interactionId = @sponsorInteractionId,
																	@responseCategoryName = @interactionResponseCategory_DonorContact,
																	@response = @interactionResponse_No,
																	@responseDate = null,                  
																	@changeAgentID = @changeAgentID

													exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
																	@interactionId = @sponsorInteractionId,
																	@responseCategoryName = @interactionResponseCategory_EFTReceived,
																	@response = @interactionResponse_No,
																	@responseDate = null,                  
																	@changeAgentID = @changeAgentID

													exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
																	@interactionId = @sponsorInteractionId,
																	@responseCategoryName = @interactionResponseCategory_LeftMessage,
																	@response = @interactionResponse_No,
																	@responseDate = null,                  
																	@changeAgentID = @changeAgentID

													exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
																	@interactionId = @sponsorInteractionId,
																	@responseCategoryName = @interactionResponseCategory_MessageType,
																	@response = @interactionResponse_None,
																	@responseDate = null,                  
																	@changeAgentID = @changeAgentID
					                    
													exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
																	@interactionId = @sponsorInteractionId,
																	@responseCategoryName = @interactionResponseCategory_Cancelled,
																	@response = @interactionResponse_No,
																	@responseDate = null,    
																	@changeAgentID = @changeAgentID

												end

											end
							
							
							
							
								end
					end

				if @writeToExceptionLog = 1
					begin
						-- insert a row into the output table
						--print '';
						--print 'writing a row into the output table for sponsor: ' + cast(@sponsorId as nvarchar(100));
						--print '';
				
						select @sponsorLookupId = LOOKUPID
						from dbo.CONSTITUENT
						where ID = @sponsorId;
				
						if @sponsorLookupId is not null
							begin
								insert into dbo.USR_D2_CAMPAIGN_BUSINESSPROCESS_RESULTS 
									(SPONSORLOOKUPID
									, D2CAMPAIGNDATE
									, CAMPAIGNTYPE
									, D2INTERACTIONSTATUS
									, ADDEDBYID
									, DATEADDED
									, CHANGEDBYID
									, DATECHANGED
									)
								values 
									(@sponsorLookupId
									, CAST(GETDATE() as date)
									, @CAMPAIGNTYPE
									, 'Not created'
									, @changeAgentID
									, @currentDate
									, @changeAgentID
									, @currentDate
									);
							end
						
						set @exceptionCount = @exceptionCount + 1;
				
					end
			
	
				fetch next from d2resultsCursor into @childId, @revenueSplitId, @sponsorId, @NTD, @payMethod, @sponsorshipRevenueId, @isHeld;
		
				-- check for a different sponsor
				if @currentSponsorId <> @sponsorId
					begin
						--print 'sponsor changed to ' + cast(@sponsorId as nvarchar(100));
				
						set @isNewSponsor = 1;
						set @currentSponsorId = @sponsorId;
				
						--print 'clearing out stuff for the old sponsor';
				
						-- reset stuff that's specific to the sponsor:	
						delete from @solicitCodeList;
				
						set @isNoEmailOrLetters = 0;	-- false
						set @isNoCalls = 0;				-- false								
						set @childrenExistForSponsor = 0;
						set @doPhoneProcess = 0;
				
						delete from @childIDList;
				
						commit transaction d2CampaignTransaction;
						--rollback transaction d2CampaignTransaction;
				
						--print 'sponsor transaction committed';
					end
				else
					set @isNewSponsor = 0;
					--print 'same sponsor...';
		
		
			end

		commit transaction d2CampaignTransaction;
		--rollback transaction d2CampaignTransaction;
		--print 'last transaction committed!';

		close d2resultsCursor;
		deallocate d2resultsCursor;

		-- populate the counts from the output table
		--declare @countSuccessSQL nvarchar(max) = 'select @successCount=count(*) from ' + @outputTableName + ' where lower(D2INTERACTIONSTATUS) not like ''%not%'' and D2CAMPAIGNDATE = Cast(GETDATE() as Date)'
		declare @countSuccessSQL nvarchar(max) = 'select @successCount=count(*) from dbo.USR_D2_CAMPAIGN_BUSINESSPROCESS_RESULTS where lower(D2INTERACTIONSTATUS) not like ''%not%'' and D2CAMPAIGNDATE = Cast(GETDATE() as Date)'
		declare @countSuccessSQLParms nvarchar(255) = '@successCount int output'

		-- Used to get the count of exceptions
		-- declare @countExceptionSQL nvarchar(max) = 'select @exceptionCount=count(*) from ' + @outputTableName + ' where lower(D2INTERACTIONSTATUS) like ''%not%'' and D2CAMPAIGNDATE = Cast(GETDATE() as Date)'
		declare @countExceptionSQL nvarchar(max) = 'select @exceptionCount=count(*) from dbo.USR_D2_CAMPAIGN_BUSINESSPROCESS_RESULTS where lower(D2INTERACTIONSTATUS) like ''%not%'' and D2CAMPAIGNDATE = Cast(GETDATE() as Date)'
		declare @countExceptionSQLParms nvarchar(255) = '@exceptionCount int output'

		if @outputTableName <> ''
			exec sp_executesql @countSuccessSQL, @countSuccessSQLParms, @successCount=@successCount output
			exec sp_executesql @countExceptionSQL, @countExceptionSQLParms, @exceptionCount=@exceptionCount output



	end try

	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1;
	end catch



end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
