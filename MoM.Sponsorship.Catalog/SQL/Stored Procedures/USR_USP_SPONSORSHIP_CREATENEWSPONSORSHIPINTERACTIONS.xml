<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="8bf74ea1-32a2-4cb7-b377-bf6b9bea08d6"
	Name="USR_USP_SPONSORSHIP_CREATENEWSPONSORSHIPINTERACTIONS"
	Description="Creates the interactions pertaining to a new sponsorship"
	Author="Cary Mayeda"
	SPName="USR_USP_SPONSORSHIP_CREATENEWSPONSORSHIPINTERACTIONS" >

	<!-- 
	Remarks:    This sproc is used by the Add a sponsorship-ocm form to create the appropriate interactions on the financial and corresponding sponsors.

	History:
	Date            Modified By     Comments
	04-Sep-2012		CMayeda			Initial Version
	10-Sep-2012		CMayeda			Completed Welcome Letter based on corrections to the flowchart
	16-Sep-2012		CMayeda			Set @eftBrochureCode = 0 for Correspondent interaction
									Added comments
									Changed case of @interactionSummary 
	22-Sep-2012		CMayeda			Fixed spelling mistake for "Catorgory"		
									Added constant @interactionFulfillmentStatus_Pending 
									Added comments
	26-Sep-2012		CMayeda			Added Child Welcome Letter interaction - FogBugz Case 826
									Fixed @changeAgentID = null on USR_USP_INTERACTION_SPONSOR_ADDCHILDREN call. This shouldn't affect anything, it's just better to set it, since we have it.
	28-Sep-2012		CMayeda			Set Child Welcome Letter expected date to 2 months out - FogBugz Case 855
	29-Sep-2012		CMayeda			Only create call /email interaction if new sponsor/prospect sponsor - FogBugz Case 862, 863
	14-Oct-2012		CMayeda			Fixed the child letter interaction going to the financial sponsor if the correspondent and financial sponsor had the same address - FogBugz Case 907
	28-Aug-2015		CMayeda			Changed raiserror syntax to work with SQL Server 2012 (CRM 4.0)	
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SPONSORSHIP_CREATENEWSPONSORSHIPINTERACTIONS (
	@sponsorshipID uniqueidentifier = null,				-- The sponsorship that the interactions will pertain to.  
														-- This is used to pull the financial sponsor and correspondent, and to determine if the recurring gift is on EFT
														-- However, it is not used for the child information
	@childIDList dbo.USR_UDT_CHILDIDLIST readonly,		-- The list of children to add to the interactions created
	@interactionTypeCodeID uniqueidentifier = null,		-- The ID of the Interaction Type that the user selected (Welcome Packet, Welcome Packet & Profile, ...)
	@changeAgentID uniqueidentifier = null				-- Used to specify change agent for CHANGEDBYID and ADDEDBYID fields.  USP_CHANGEAGENT_GETORCREATECHANGEAGENT is called if it's null
)
as
begin
	if @changeAgentID is null  
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output

	-- Constants
	declare @callCenterManagerConstituentID uniqueidentifier = 'B25168DC-4DD4-46ED-B4DD-C5A26A965667'	-- This constituent is hard coded via a script
	
	declare @welcomeGreetingPhoneCallDelay tinyint = 25									-- How many days after the current date to set the Expected Date of the Welcome Greeting Phone Call 

	declare @interactionSummary nvarchar(100) = 'New sponsorship complete'				-- Used for the Summary of all sponsor interactions
	declare @childInteractionSummary nvarchar(100) = 'New sponsorship complete'			-- Used for the Summary of all child interactions


	declare @interactionFulfillmentStatus_Pending nvarchar(100) = 'Pending'
	
	-- Interaction Category / Subcategory Names used in creating the interactions
	declare @interactionCategoryDesc_SponsorWelcome nvarchar(100) = 'Sponsor Welcome'	-- The category used for all sponsor interactions
	declare @interactionCategoryDesc_ChildLetter nvarchar(100) = 'Child Letters'		-- The category used for all child interactions


	declare @interactionSubcategoryDesc_WelcomePacket nvarchar(100) = 'Welcome Packet'
	declare @interactionSubcategoryDesc_WelcomePacketAndProfile nvarchar(100) = 'Welcome Packet & Profile'
	declare @interactionSubcategoryDesc_WelcomeLetter nvarchar(100) = 'Welcome Letter'
	declare @interactionSubcategoryDesc_AdditionalChildLetter nvarchar(100) = 'Additional Child Letter'
	declare @interactionSubcategoryDesc_AdditionalChildLetterAndProfile nvarchar(100) = 'Additional Child Letter & Profile'
	declare @interactionSubcategoryDesc_WelcomeGreeting nvarchar(100) = 'Welcome Greeting'

	declare @interactionSubcategoryDesc_WelcomePacketFinancialSponsor nvarchar(100) = 'Welcome Packet - Financial Sponsor'
	declare @interactionSubcategoryDesc_WelcomePacketAndProfileFinancialSponsor nvarchar(100) = 'Welcome Packet & Profile - Financial Sponsor'
	declare @interactionSubcategoryDesc_WelcomeLetterFinancialSponsor nvarchar(100) = 'Welcome Letter - Financial Sponsor'
	declare @interactionSubcategoryDesc_AdditionalChildLetterFinancialSponsor nvarchar(100) = 'Additional Child Letter - Financial Sponsor'
	declare @interactionSubcategoryDesc_AdditionalChildLetterAndProfileFinancialSponsor nvarchar(100) = 'Additional Child Letter & Profile - Financial Sponsor'

	declare @interactionSubcategoryDesc_WelcomePacketCorrespondingSponsor nvarchar(100) = 'Welcome Packet - Corresponding Sponsor'
	declare @interactionSubcategoryDesc_WelcomePacketAndProfileCorrespondingSponsor nvarchar(100) = 'Welcome Packet & Profile - Corresponding Sponsor'

	declare @interactionSubcategoryDesc_ChildWelcomeLetter nvarchar(100) = 'Child Welcome Letter'


	-- Contact Method descriptions
	declare @contactMethodDesc_Mail nvarchar (100) = 'Mail'
	declare @contactMethodDesc_Email nvarchar (100) = 'Email'
	declare @contactMethodDesc_Phone nvarchar (100) = 'Phone'

	-- Response Category descriptions
	declare @interactionResponseCategory_DonorContact nvarchar(100) = 'Donor Contact'
	declare @interactionResponseCategory_LeftMessage nvarchar(100) = 'Left Message'
	declare @interactionResponseCategory_MessageType nvarchar(100) = 'Message Type'
	declare @interactionResponseCategory_PacketReceived nvarchar(100) = 'Packet Received'
	declare @interactionResponseCategory_EFTReceived nvarchar(100) = 'EFT Received'

	-- Response descriptions
	declare @interactionResponse_No nvarchar(100) = 'No'
	declare @interactionResponse_None nvarchar(100) = 'None'
	declare @interactionResponse_Unknown nvarchar(100) = 'Unknown'



	-- These are used to lookup the interactionTypeCodeIDs from USR_NEWSPONSORSHIPINTERACTIONTYPECODE
	-- This is what the user selected on the form
	declare @interactionTypeCodeDesc_WelcomePacket nvarchar(100) = 'Welcome Packet'
	declare @interactionTypeCodeDesc_WelcomePacketAndProfile nvarchar(100) = 'Welcome Packet & Profile'
	declare @interactionTypeCodeDesc_WelcomeLetter nvarchar(100) = 'Welcome Letter'
	declare @interactionTypeCodeDesc_AdditionalChildLetter nvarchar(100) = 'Additional Child Letter'
	declare @interactionTypeCodeDesc_AdditionalChildLetterAndProfile nvarchar(100) = 'Additional Child Letter & Profile'


	-- This are used to determine what interaction type the user selected
	declare @interactionTypeCodeID_WelcomePacket uniqueidentifier = null
	declare @interactionTypeCodeID_WelcomePacketAndProfile uniqueidentifier = null
	declare @interactionTypeCodeID_WelcomeLetter uniqueidentifier = null
	declare @interactionTypeCodeID_AdditionalChildLetter uniqueidentifier = null
	declare @interactionTypeCodeID_AdditionalChildLetterAndProfile uniqueidentifier = null

	-- Error messages if the interaction type code couldn't be found
	declare @interactionTypeCodeErrorMsg_WelcomePacket  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_WelcomePacket + ' in code table USR_NEWSPONSORSHIPINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_WelcomePacketAndProfile  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_WelcomePacketAndProfile + ' in code table USR_NEWSPONSORSHIPINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_WelcomeLetter  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_WelcomeLetter + ' in code table USR_NEWSPONSORSHIPINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_AdditionalChildLetter nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_AdditionalChildLetter + ' in code table USR_NEWSPONSORSHIPINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_AdditionalChildLetterAndProfile nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_AdditionalChildLetterAndProfile + ' in code table USR_NEWSPONSORSHIPINTERACTIONTYPECODE'


	begin try
		select @interactionTypeCodeID_WelcomePacket = ID from dbo.USR_NEWSPONSORSHIPINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_WelcomePacket)
		if @interactionTypeCodeID_WelcomePacket is null
			raiserror (@interactionTypeCodeErrorMsg_WelcomePacket, 16, 1)
		
		select @interactionTypeCodeID_WelcomePacketAndProfile = ID from dbo.USR_NEWSPONSORSHIPINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_WelcomePacketAndProfile)
		if @interactionTypeCodeID_WelcomePacketAndProfile is null
			raiserror (@interactionTypeCodeErrorMsg_WelcomePacketAndProfile, 16, 1)
			
		select @interactionTypeCodeID_WelcomeLetter = ID from dbo.USR_NEWSPONSORSHIPINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_WelcomeLetter)
		if @interactionTypeCodeID_WelcomeLetter is null
			raiserror (@interactionTypeCodeErrorMsg_WelcomeLetter, 16, 1)

		select @interactionTypeCodeID_AdditionalChildLetter = ID from dbo.USR_NEWSPONSORSHIPINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_AdditionalChildLetter)
		if @interactionTypeCodeID_AdditionalChildLetter is null
			raiserror (@interactionTypeCodeErrorMsg_AdditionalChildLetter, 16, 1)
	
		select @interactionTypeCodeID_AdditionalChildLetterAndProfile = ID from dbo.USR_NEWSPONSORSHIPINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_AdditionalChildLetterAndProfile)
		if @interactionTypeCodeID_AdditionalChildLetterAndProfile is null
			raiserror (@interactionTypeCodeErrorMsg_AdditionalChildLetterAndProfile, 16, 1)
	
	end try
	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1	
	end catch


	declare @financialSponsorID uniqueidentifier = null
	declare @correspondentID uniqueidentifier = null

	declare @financialSponsorInteractionOnly bit = 1

	declare @financialSponsorAddress nvarchar (150) = ''
	declare @correspondentAddress nvarchar (150) = ''
	declare @financialSponsorStateID uniqueidentifier = null
	declare @correspondentStateID uniqueidentifier = null

	set @correspondentID = dbo.USR_UFN_SPONSORSHIP_GETCORRESPONDENT (@sponsorshipID)
	set @financialSponsorID = dbo.USR_UFN_SPONSORSHIP_GETFINANCIALSPONSOR (@sponsorshipID)


	-- Determine who should get the interaction (Child Correspondent or Financial Sponsor)

	if @correspondentID is null
		set @financialSponsorInteractionOnly = 1
	else
	begin
		-- If there is a Child Correspondent, determine if they live at the same address as the Financial Sponsor
		-- If both have the same address, then the interaction goes to the Financial Sponsor
		-- If they have different addresses, then the interaction goes to the Child Correspondent
	
		-- Comparison is of the Address Block and State
		-- Blackbaud's OOB UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE is used to make the comparison more accuate
		-- It standardizes the addresses by applying standard abbreviations, removing white space, and converting to lower case
	
		declare @SUBSTITUTIONS dbo.UDT_STRINGPAIR_100 -- This is required by the user defined function, but we do not have any additional standardizations to apply
	
		select	@financialSponsorAddress = ADDRESSBLOCK,
				@financialSponsorStateID = STATEID
		  from	dbo.ADDRESS
		 where	CONSTITUENTID = @financialSponsorID
	 
		select	@correspondentAddress = ADDRESSBLOCK,
				@correspondentStateID = STATEID
		  from	dbo.ADDRESS
		 where	CONSTITUENTID = @correspondentID

	
		if (dbo.UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE(@financialSponsorAddress, @SUBSTITUTIONS)= dbo.UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE(@correspondentAddress, @SUBSTITUTIONS))
			and ((@financialSponsorStateID is null and @correspondentStateID is null) or (@financialSponsorStateID = @correspondentStateID))
	    	    
			set @financialSponsorInteractionOnly = 1
		else
			set @financialSponsorInteractionOnly = 0
	end


	declare @welcomeMailContactMethodDesc nvarchar(100) = ''
	declare @welcomeMailSubCategoryDesc nvarchar (100) = ''
	declare @welcomeMailFulfillmentStatus nvarchar (100) = ''
	declare @welcomePhoneSubCategoryDesc nvarchar (100) = ''

	declare @interactionID uniqueidentifier = null
	declare @currentDate date = getdate()
	declare @eftBrochureCode bit = ~ dbo.USR_UFN_SPONSORSHIP_ISEFT (@sponsorshipID) 

	if @financialSponsorInteractionOnly = 1
		set @welcomeMailSubCategoryDesc = 	case 
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomePacket  then @interactionSubcategoryDesc_WelcomePacket
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomePacketAndProfile  then @interactionSubcategoryDesc_WelcomePacketAndProfile
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomeLetter then @interactionSubcategoryDesc_WelcomeLetter
												when @interactionTypeCodeID = @interactionTypeCodeID_AdditionalChildLetter  then @interactionSubcategoryDesc_AdditionalChildLetter
												when @interactionTypeCodeID = @interactionTypeCodeID_AdditionalChildLetterAndProfile  then @interactionSubcategoryDesc_AdditionalChildLetterAndProfile
												else ''
											end
	else
		set @welcomeMailSubCategoryDesc = 	case 
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomePacket  then @interactionSubcategoryDesc_WelcomePacketFinancialSponsor
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomePacketAndProfile  then @interactionSubcategoryDesc_WelcomePacketAndProfileFinancialSponsor
												when @interactionTypeCodeID = @interactionTypeCodeID_WelcomeLetter then @interactionSubcategoryDesc_WelcomeLetterFinancialSponsor
												when @interactionTypeCodeID = @interactionTypeCodeID_AdditionalChildLetter  then @interactionSubcategoryDesc_AdditionalChildLetterFinancialSponsor
												when @interactionTypeCodeID = @interactionTypeCodeID_AdditionalChildLetterAndProfile  then @interactionSubcategoryDesc_AdditionalChildLetterAndProfileFinancialSponsor
												else ''
											end




	-- Create interaction on Financial Sponsor based on user interaction type selection 
	
	if @interactionTypeCodeID = @interactionTypeCodeID_WelcomeLetter 
		if dbo.USR_UFN_CONSTITUENT_GETVALIDPRIMARYEMAILADDRESS(@financialSponsorID) <> ''
			set @welcomeMailContactMethodDesc = @contactMethodDesc_Email
		else
			set @welcomeMailContactMethodDesc = @contactMethodDesc_Mail
	else
		set @welcomeMailContactMethodDesc = @contactMethodDesc_Mail
	
	
	if @interactionTypeCodeID in (@interactionTypeCodeID_WelcomePacketAndProfile, @interactionTypeCodeID_AdditionalChildLetterAndProfile)
		set @welcomeMailFulfillmentStatus = @interactionFulfillmentStatus_Pending
	else
		set @welcomeMailFulfillmentStatus = ''
		

	exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
		@id = @interactionID output,
		@constituentID = @financialSponsorID,
		@summary = @interactionSummary,
		@categoryName = @interactionCategoryDesc_SponsorWelcome,
		@subcategoryName = @welcomeMailSubCategoryDesc,
		@expectedDate = @currentDate,
		@owner = null,						
		@contactMethodDesc = @welcomeMailContactMethodDesc,
		@comment = '',						
		@letterTypeDesc = '',
		@fulfillmentStatusDesc = @welcomeMailFulfillmentStatus, 
		@eftBrochureCode =  @eftBrochureCode,
		@resendCode = 0,
		@changeAgentID = @changeAgentID				

	if @interactionID is not null
		exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
			@interactionID = @interactionID,
			@childIDList = @childIDList,
			@changeAgentID = null


	-- If the sponsor does not already sponsor a child, then add a welcome greeting interaction
	
	if @interactionTypeCodeID not in (@interactionTypeCodeID_AdditionalChildLetter, @interactionTypeCodeID_AdditionalChildLetterAndProfile)	
	begin
		declare @expectedDate date = dateadd(d, @welcomeGreetingPhoneCallDelay, @currentDate)
	
		exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
			@id = @interactionID output,
			@constituentID = @financialSponsorID,
			@summary = @interactionSummary,
			@categoryName = @interactionCategoryDesc_SponsorWelcome,
			@subcategoryName = @interactionSubcategoryDesc_WelcomeGreeting,
			@expectedDate = @expectedDate,
			@owner = @callCenterManagerConstituentID,						
			@contactMethodDesc = @contactMethodDesc_Phone,
			@comment = '',						
			@letterTypeDesc = '',
			@fulfillmentStatusDesc = '',
			@eftBrochureCode = 0,
			@resendCode = 0,
			@changeAgentID = @changeAgentID				

		if @interactionID is not null
		begin
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
				@interactionID = @interactionID,
				@childIDList = @childIDList,
				@changeAgentID = null	

			exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
				@interactionID = @interactionID,
				@responseCategoryName = @interactionResponseCategory_DonorContact,
				@response = @interactionResponse_No,
				@responseDate = null,		
				@changeAgentID = @changeAgentID

			exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
				@interactionID = @interactionID,
				@responseCategoryName = @interactionResponseCategory_EFTReceived,
				@response = @interactionResponse_No,
				@responseDate = null,		
				@changeAgentID = @changeAgentID

			exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
				@interactionID = @interactionID,
				@responseCategoryName = @interactionResponseCategory_LeftMessage,
				@response = @interactionResponse_No,
				@responseDate = null,		
				@changeAgentID = @changeAgentID

			exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
				@interactionID = @interactionID,
				@responseCategoryName = @interactionResponseCategory_MessageType,
				@response = @interactionResponse_None,
				@responseDate = null,		
				@changeAgentID = @changeAgentID
			
			exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
				@interactionID = @interactionID,
				@responseCategoryName = @interactionResponseCategory_PacketReceived,
				@response = @interactionResponse_Unknown,
				@responseDate = null,		
				@changeAgentID = @changeAgentID

		end
	end


	if @financialSponsorInteractionOnly = 0
	begin
		-- Add the Correspondent Interaction
	
		set @welcomeMailSubCategoryDesc = 	case 
												when @INTERACTIONTYPECODEID in (@interactionTypeCodeID_WelcomePacket, @interactionTypeCodeID_WelcomeLetter, @interactionTypeCodeID_AdditionalChildLetter)  then
													@interactionSubcategoryDesc_WelcomePacketCorrespondingSponsor
												when @INTERACTIONTYPECODEID in (@interactionTypeCodeID_WelcomePacketAndProfile, @interactionTypeCodeID_AdditionalChildLetterAndProfile) then
													@interactionSubcategoryDesc_WelcomePacketAndProfileCorrespondingSponsor											
												else ''
											end


		exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
			@id = @interactionID output,
			@constituentID = @correspondentID,
			@summary = @interactionSummary,
			@categoryName = @interactionCategoryDesc_SponsorWelcome,
			@subcategoryName = @welcomeMailSubCategoryDesc,
			@expectedDate = @currentDate,
			@owner = null,						
			@contactMethodDesc = @contactMethodDesc_Mail,
			@comment = '',						
			@letterTypeDesc = '',
			@fulfillmentStatusDesc = @welcomeMailFulfillmentStatus, 
			@eftBrochureCode = 0,
			@resendCode = 0,
			@changeAgentID = @changeAgentID				

		if @interactionID is not null
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
				@interactionID = @interactionID,
				@childIDList = @childIDList,
				@changeAgentID = @changeAgentID
	end


	-- Add Child Welcome Letter action on all of the children
	declare @sponsorshipOpportunityChildID uniqueidentifier = null

	declare @childLetterRecipient uniqueidentifier = null
	if @correspondentID is null
		set @childLetterRecipient = @financialSponsorID
	else
		set @childLetterRecipient = @correspondentID
		
	-- Set the expected date of the child welcome to the last day of the month 2 months from the current date
	declare @childWelcomLetterExpectedDate date
	set @childWelcomLetterExpectedDate = dateadd(dd, -1, dateadd(mm, 3, (dateadd(dd,-(day(@currentDate)-1),@currentDate))))

	declare childListCursor cursor for
	select sponsorshipOpportunityChildID from @childIDList
			
	open childListCursor 
	fetch next from childListCursor 
	into @sponsorshipOpportunityChildID
	
	while @@FETCH_STATUS = 0
	begin
		exec dbo.USR_USP_INTERACTION_CHILDLETTER_ADD_PENDING
			@id = @interactionID output,					
			@sponsorhipOpportunityChildID = @sponsorshipOpportunityChildID,
			@summary = @childInteractionSummary,
			@categoryName = @interactionCategoryDesc_ChildLetter,
			@subcategoryName = @interactionSubcategoryDesc_ChildWelcomeLetter,
			@expectedDate = @childWelcomLetterExpectedDate,
			@owner = null,
			@contactMethodDesc = @contactMethodDesc_Mail,
			@comment = '',				
			@sponsorID = @childLetterRecipient,
			@changeAgentID = @changeAgentID
			
		fetch next from childListCursor 
		into @sponsorshipOpportunityChildID
	end
	
	close childListCursor
	deallocate childListCursor
	
	return 0
end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
