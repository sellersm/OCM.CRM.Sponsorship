<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="0f2fbf46-deb7-44c8-b406-aca4054135f5"
	Name="USR_USP_RGL_POPULATE_PRETEMPTABLES"
	Description="RGL: populates the USR_RGLTABLE"
	Author="Memphis Sellers"
	SPName="USR_USP_RGL_POPULATE_PRETEMPTABLES"
	GrantServiceRolePermission="true"
	>

	<!-- 
	Remarks:    Populates the RGL table using rows from the 'temp' RGL Table, USR_RGLTABLE
	
	History:
	Date            Modified By     Comments
	18-Feb-2016		Memphis			Initial Version
	23-Feb-2016		Memphis			Changed the cteLastSpon CTE to use the IsMostRecentForCommitment flag to identify
									the latest Sponsorship record for any Reassign/Transfer/etc.
	-->

	
	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_RGL_POPULATE_PRETEMPTABLES (
	@SPONSORID uniqueidentifier = NULL
)
as
begin
	-- This is the script for the 1st RGL Sproc that populates the USR_RGLTABLE table:
	-- dbo.USR_RGL_POPULATE_PRETEMPTABLES

	--declare @SPONSORID uniqueidentifier = NULL;  -- test with this: '6715D12A-34C5-4210-B633-4A6B8D220E54'
	declare @dateAdded datetime = getdate();

	begin try
		begin transaction insertTrans

			-- if this is for one sponsor, remove their rows from dbo.USR_COMMITMENTLINE_RECURRINGGIFT:
			if @SPONSORID is not null
				begin
					delete
					from dbo.USR_COMMITMENTLINE_RECURRINGGIFT
					where sponsorid = @SPONSORID
				end
			else
				begin
					-- if there is no specific sponsor, then remove all RGL rows as we're running it for everyone
					truncate table dbo.USR_COMMITMENTLINE_RECURRINGGIFT;
				end
				

			truncate table dbo.USR_RGLCOMMITMENTSPONSORSHIPS_TEMP;

			-- populate temp table with all the sponsorship commitments for the given RG:
			insert dbo.USR_RGLCOMMITMENTSPONSORSHIPS_TEMP
			select	--distinct
					sponsorCon.ID
					,s.SPONSORSHIPCOMMITMENTID
					,SPONSORSHIPCOMMITMENT.LOOKUPID
					,r.ID
					,s.ID
					,s.STARTDATE
					,s.ENDDATE
					,s.[STATUS]
					,s.STATUSCODE
					,s.ISMOSTRECENTFORCOMMITMENT
					,ESSD.VALUE
					,dbo.UFN_APPEALCATEGORYCODE_GETDESCRIPTION(a.APPEALCATEGORYCODEID) as AppealCategory
					,a.[NAME] as AppealName
					,dbo.UFN_APPEALREPORT1CODE_GETDESCRIPTION(a.AppealReport1CodeID) as AppealSource
					,CHANNELCODE.[DESCRIPTION] as InboundChannel
					,MIN(SPONSORSHIPCOMMITMENT.commitmentsequence) over (partition by SPONSORSHIPCOMMITMENT.ID)
					,commitmentsequence
			from dbo.sponsorship s --dbo.sponsorshiptransaction st
				inner join dbo.SPONSORSHIPCOMMITMENT on SPONSORSHIPCOMMITMENT.ID = s.SPONSORSHIPCOMMITMENTID and s.constituentid = SPONSORSHIPCOMMITMENT.constituentid 
				join dbo.CONSTITUENT sponsorCon on sponsorCon.ID = dbo.SPONSORSHIPCOMMITMENT.CONSTITUENTID
				left outer join dbo.SPONSORSHIPOPPORTUNITYCHILD sc on sc.ID = s.SPONSORSHIPOPPORTUNITYID
				join dbo.REVENUESPLIT rs on rs.ID = s.REVENUESPLITID
				join dbo.REVENUE r on r.ID = rs.REVENUEID
				left join dbo.APPEAL a on a.ID = r.APPEALID
				left join dbo.CHANNELCODE on CHANNELCODE.ID = r.CHANNELCODEID
				--inner join SMARTFIELDF896CC5033AE41FB88676CD24BAB3FD0 ESSD on dbo.SPONSORSHIPCOMMITMENT.CONSTITUENTID = ESSD.ID and ESSD.VALUE >= '1/1/2009'	
				-- 1/4/16: This is the new SmartField table to use in DEV:
				-- dbo.SMARTFIELDBB91D38CB66F44A3A65E37E7F4D99941
	
				-- 2-23-16: TOOK OUT THE DATE CONSTRAINT, JUST PUT THEM ALL IN THE TEMP TABLE:
				inner join dbo.SMARTFIELDBB91D38CB66F44A3A65E37E7F4D99941 ESSD on dbo.SPONSORSHIPCOMMITMENT.CONSTITUENTID = ESSD.ID  -- and ESSD.VALUE >= '1/1/2009'	
				-- END 2-23-16:
	
				where sc.ID is not null	
				and sponsorCon.ID = coalesce(@SPONSORID, sponsorCon.ID) 
			order by r.ID, s.STARTDATE

			truncate table dbo.USR_RGLCOMMITMENTS_TEMP;

			-- **** 2-23-16: NEW!  Trying to put all sponsorships for the RGL/Commitments into one flat table
			--      Now, figure out which rows to keep based on the ESSDVALUE rules:
			declare @cteTable table (
				minSponStartDate date,
				minRglCommitSeq int,
				ESSDVALUE date,
				startdate date,
				RGID uniqueidentifier,
				LOOKUPID nvarchar(max),
				SPONSORID uniqueidentifier,
				createGiftSponsor uniqueidentifier,
				createTranSeq int,
				targetSponsorshipId uniqueidentifier,
				TARGETACTIONCODE int,
				createTranDate date,
				createCommitment uniqueidentifier,
				createInitialStatus nvarchar(max),
				ISACCOUNTCORRECTION bit,
				CONVERSIONDATE date,
				DAYSTOCONVERT int,
				SPONCOMMITMENTID uniqueidentifier,
				APPEALCATEGORY   NVARCHAR (500) NULL,
				APPEALNAME       NVARCHAR (500) NULL,
				APPEALSOURCE     NVARCHAR (MAX) NULL,
				INBOUNDCHANNEL   NVARCHAR (MAX) NULL,
				maxRglCommitSeq  int
			)

			;with ctePre2009Rows as (
				select	distinct
						RGID,
						min(STARTDATE) over (partition by RGID) as minSponStartDate,
						min(commitmentseq) over (partition by RGID) as minRglCommitSeq,
						ESSDVALUE,
						commitmentseq,
						SPONSORID,
						SPONCOMMITMENTID,
						COMMITMENTLOOKUPID,
						SPONSORSHIPID,
						STARTDATE,
						ENDDATE,
						SPONSORSHIPSTATUS,
						SPONSORSHIPSTATUSCODE,
						ISMOSTRECENT,
						APPEALCATEGORY,
						APPEALNAME,
						APPEALSOURCE,
						INBOUNDCHANNEL,
						minCommitSeq
				from dbo.USR_RGLCOMMITMENTSPONSORSHIPS_TEMP
			)
			, cteRows as (
				select	*,
						max(commitmentseq) over (partition by RGID) as maxRglCommitSeq
				from ctePre2009Rows
				where ((ESSDVALUE < '1/1/2009' and minSponStartDate >= '10/1/2012')
				or (ESSDVALUE >= '1/1/2009'))
			)

			insert dbo.USR_RGLCOMMITMENTS_TEMP
			select	SPONSORID
					,SPONCOMMITMENTID
					,COMMITMENTLOOKUPID
					,RGID
					,STARTDATE
					,APPEALCATEGORY
					,APPEALNAME
					,APPEALSOURCE
					,INBOUNDCHANNEL
					,minCommitSeq
					,(case when (ESSDVALUE < '1/1/2009' and minSponStartDate >= '10/1/2012') then 1
						when (ESSDVALUE >= '1/1/2009') then 0 end)
			from cteRows

			truncate table dbo.USR_RGLTARGETTABLE;

			insert dbo.USR_RGLTARGETTABLE --dbo.USR_RGLTARGETTABLE
			select	distinct 
					rct.RGID as RevenueId
					,rct.SPONSORID
					,CREATETRANSACTION.GIFTFINANCIALSPONSORID as createGiftSponsor
					,CREATETRANSACTION.TRANSACTIONSEQUENCE as createTranSeq
					,CREATETRANSACTION.SPONSORSHIPCOMMITMENTID as createCommitment
					,CREATETRANSACTION.TARGETSPONSORSHIPID as targetSponsorshipId
					,CREATETRANSACTION.ACTIONCODE as TARGETACTIONCODE
					,CREATETRANSACTION.TRANSACTIONDATE as createTranDate
					,coalesce(initial.[description],'') as createInitialStatus
					,sponex.ISACCOUNTCORRECTION
					,sponex.CONVERSIONDATE
					,sponex.DAYSTOCONVERT
					,rct.minCommitSeq
					,rct.APPEALCATEGORY
					,rct.APPEALNAME
					,rct.APPEALSOURCE
					,rct.INBOUNDCHANNEL
			from dbo.USR_RGLCOMMITMENTS_TEMP rct
			join dbo.sponsorship s on s.SPONSORSHIPCOMMITMENTID = rct.SPONCOMMITMENTID
				join dbo.SPONSORSHIPTRANSACTION CREATETRANSACTION on CREATETRANSACTION.SPONSORSHIPCOMMITMENTID = rct.SPONCOMMITMENTID 
						and CREATETRANSACTION.TRANSACTIONSEQUENCE = (select min(TRANSACTIONSEQUENCE) from dbo.SPONSORSHIPTRANSACTION MINSEQUENCE 
								where MINSEQUENCE.SPONSORSHIPCOMMITMENTID = rct.SPONCOMMITMENTID 
								and MINSEQUENCE.TARGETSPONSORSHIPID = s.ID
								and ((MINSEQUENCE.ACTIONCODE = 0 or MINSEQUENCE.ACTIONCODE = 5) and MINSEQUENCE.TRANSACTIONSEQUENCE = 1))  -- add or reassign)
			left join dbo.USR_SPONSORSHIPEXTENSION sponex on sponex.ID = CREATETRANSACTION.TARGETSPONSORSHIPID
			left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
			--join dbo.sponsorshipcommitment sc on sc.ID = rct.SPONCOMMITMENTID and commitmentsequence = rct.minCommitSeq
			where minCommitSeq = (select min(minCommitSeq) from dbo.USR_RGLCOMMITMENTS_TEMP rct2 where rct2.RGID = rct.RGID)

			-- 1-27-16: added this to correctly obtain the pre2009/post2012 sponsorships only:
			and 1 = (case when isPre2009 = 1 then (case when s.startdate >= '10/1/2012' then 1 else 0 end) else 1 end)

			order by rct.RGID,CREATETRANSACTION.TRANSACTIONDATE;

			-- Now work on the LAST values:
			truncate table dbo.USR_RGL_COMMITMENTSEQUENCE;

			-- populate the @commitSeqTable temp table with the
			--  the max commitmentsequence which gives us the 'latest' sponsorship commitment for each RG row:
			insert dbo.USR_RGL_COMMITMENTSEQUENCE
			select	--'SponTran rows for Sponsors',
					distinct
					sc.ID,
					rg.RGID,
					MAX(sc.commitmentsequence) over (partition by sc.ID)
			from dbo.sponsorshipcommitment sc 
			join dbo.USR_RGLCOMMITMENTS_TEMP rg on rg.SPONCOMMITMENTID = sc.ID
			where sc.constituentid  = rg.SPONSORID
			order by rg.RGID;


			-- populate the temp table with sponsorship transaction rows 
			--	for the given sponsorship commitments in the temp table populated above

			truncate table dbo.USR_RGL_LASTSPONTRANRGTABLE;

			-- ****************** 1-26-16 LOOK INTO THIS ******************************
			-- *********** THIS IS THE BOTTLENECK!!  DO WE NEED IT ALL???  ************

			-- 1-26-16: testing a temp table instead of cte for performance testing:
			declare @maxCommitmentTable table (
				maxComSeq int,
				SPONCOMMITMENTID uniqueidentifier,
				RGID uniqueidentifier
			)

			insert into @maxCommitmentTable
			select	distinct
					max(maxCommitSequence) over (partition by RGID) as maxComSeq,
					SPONCOMMITMENTID,
					RGID
			from dbo.USR_RGL_COMMITMENTSEQUENCE cst
			where maxCommitSequence = (select max(maxCommitSequence) from dbo.USR_RGL_COMMITMENTSEQUENCE ct where cst.RGID = ct.RGID)

			-- try to get the last spontran stuff here, just the max sequence for each RG first, add rest later:
			-- ** This appears to work for getting the last spontran items for each RG!
			insert into dbo.USR_RGL_LASTSPONTRANRGTABLE
			select	distinct
					MAX(st.transactionsequence) over (partition by cte.RGID) as maxTranSequence,
					st.actioncode,
					st.sponsorshipreasonid,
					st.targetsponsorshipid,
					st.contextsponsorshipid,
					cte.RGID
			from dbo.sponsorshiptransaction st
			join @maxCommitmentTable cte on cte.SPONCOMMITMENTID = st.sponsorshipcommitmentID 
			join dbo.USR_RGL_COMMITMENTSEQUENCE cst on cst.SPONCOMMITMENTID = cte.SPONCOMMITMENTID and st.sponsorshipcommitmentID = cte.SPONCOMMITMENTID
			join dbo.sponsorshipcommitment sc on sc.ID = cte.SPONCOMMITMENTID and sc.ID = st.sponsorshipcommitmentID and sc.commitmentsequence = cst.maxCommitSequence
			where st.transactionsequence = (select distinct MAX(transactionsequence) from dbo.sponsorshiptransaction
											join @maxCommitmentTable cte on cte.SPONCOMMITMENTID = sponsorshipcommitmentID 
											join dbo.USR_RGL_COMMITMENTSEQUENCE cst on cst.SPONCOMMITMENTID = cte.SPONCOMMITMENTID 
												and st.sponsorshipcommitmentID = cte.SPONCOMMITMENTID
											join dbo.sponsorshipcommitment sc on sc.ID = cte.SPONCOMMITMENTID 
												and sc.ID = sponsorshipcommitmentID and sc.commitmentsequence = cst.maxCommitSequence)

			---  Now we'll need to get the related data from the related Sponsorships: EndDate, Status, etc.
			truncate table dbo.USR_RGL_LASTSPONTRANTABLE;

			-- get last sponsorship id value, based on action & sponsorship status:
			;with cteLastSponId as (
				select	
						(case when reassigned.ISMOSTRECENTFORCOMMITMENT = 1 then reassigned.ID
							  when s.ISMOSTRECENTFORCOMMITMENT = 1 then s.ID end) as newLastSponId,
						isnull(reassigned.ID,s.ID) as lastSponId,
						(case when reassigned.ISMOSTRECENTFORCOMMITMENT = 1 then reassigned.ENDDATE
							  when s.ISMOSTRECENTFORCOMMITMENT = 1 then s.ENDDATE end) as newEndDate,
						(case when reassigned.ID is not null then reassigned.ENDDATE else s.ENDDATE end) as enddate,
						lst.*
				from dbo.USR_RGL_LASTSPONTRANRGTABLE lst
				left outer join dbo.sponsorship contReassigned on contReassigned.ID = (case when lst.lastActionCode = 5 then lst.lastContextSponId end)
				left outer join dbo.sponsorship targReassigned on targReassigned.ID = (case when lst.lastActionCode = 5 then lst.lastTargetSponId end)
				join dbo.USR_RGLTARGETTABLE rgt on rgt.RGID = lst.RGID
				-- try using the contReassigned.ISMOSTRECENTFORCOMMITMENT
				left outer join dbo.sponsorship reassigned on reassigned.ID = case when contReassigned.ISMOSTRECENTFORCOMMITMENT = 1 and contReassigned.constituentid = rgt.SPONSORID then contReassigned.ID
																			  when targReassigned.ISMOSTRECENTFORCOMMITMENT = 1 and targReassigned.constituentid = rgt.SPONSORID then targReassigned.ID end
				join dbo.sponsorship s on s.ID = isnull(lst.lastTargetSponId, lst.lastContextSponId)
			)

			-- get the sponsorshipextension values:
			insert dbo.USR_RGL_LASTSPONTRANTABLE
			select	cte.maxSponTranSeq,
					cte.lastActionCode,
					cte.lastSponReasonId,
					cte.lastTargetSponId,
					cte.lastContextSponId,
					cte.RGID,
					cte.lastSponId,
					cte.enddate,
					coalesce(initial.[description],'') as InitialDescription,
					sponex.ISACCOUNTCORRECTION,
					sponex.CONVERSIONDATE,
					sponex.DAYSTOCONVERT,
					coalesce(reason.[reason],'')
			from cteLastSponId cte
			left join dbo.USR_SPONSORSHIPEXTENSION sponex on sponex.ID = cte.lastSponId
			left join dbo.USR_INITIALOPPORTUNITYSPONSORSHIPSTATUSCODE initial on initial.ID = INITIALOPPORTUNITYSPONSORSHIPSTATUSCODEID
			left join dbo.SPONSORSHIPREASON reason on reason.ID = cte.lastSponReasonId
			order by cte.RGID


			-- 1-25-16: can we get the RGLTABLE values from joining the two temp tables from above?
			truncate table dbo.USR_RGLTABLE;

			insert into dbo.USR_RGLTABLE (
				REVENUEID,
				SPONSORID,
				MINSTARTDATE,
				TARGETACTIONCODE,
				APPEALCATEGORY,
				APPEALNAME,
				APPEALSOURCE,
				INBOUNDCHANNEL,
				targetSponsorshipId,
				createGiftSponsor,
				lastACTIONCODE,
				lastSponReasonId,
				lastSponsorshipId,
				TARGETINITIALSTATUS,
				TARGETACCOUNTCORRECTION,
				TARGETCONVERSIONDATE,
				DAYSTOCONVERT, --  this needs some more work I think... Use LAST if present, otherwise TARGET if present.,
				SPONSORSHIPREASON,
				lastSponEndDate,
				DATEADDED,
				RGLTYPE
			)
			select	distinct
					tt.RGID
					,tt.SPONSORID
					,tt.createTranDate
					,tt.TARGETACTIONCODE
					,tt.APPEALCATEGORY
					,tt.APPEALNAME
					,tt.APPEALSOURCE
					,tt.INBOUNDCHANNEL
					,tt.targetSponsorshipId		
					,tt.createGiftSponsor		
					,lastRows.lastActionCode
					,lastRows.lastSponReasonId	
					,lastRows.lastSponsorshipId	
					,tt.createInitialStatus
					,tt.TargetACCOUNTCORRECTION
					,tt.TARGETCONVERSIONDATE
					,tt.TARGETDAYSTOCONVERT
					,lastRows.lastReason
					,lastRows.lastEndDate
					,getdate()
					,0
			from dbo.USR_RGLTARGETTABLE tt
			join dbo.USR_RGL_LASTSPONTRANTABLE lastRows on lastRows.RGID = tt.RGID
			order by tt.RGID;

		commit transaction insertTrans

	end try

	begin catch
	  rollback transaction insertTrans
	  DECLARE @ErrMsg AS NVARCHAR(MAX);
	  declare @ErrSeverity int;
	  -- Raise an error with the details of the exception
	  SELECT @ErrMsg = ERROR_MESSAGE(),
		@ErrSeverity = ERROR_SEVERITY()

	  RAISERROR(@ErrMsg, @ErrSeverity, 1);
	end catch
end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
