<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes" 
	ID="42d317f9-b42f-44e6-98ad-63c15395f4a6"
	Name="USR_USP_CREATE_PROJECTSPONSORSHIP_CANCELLATION_INTERACTIONS"
	Description="Creates interactions for project sponsorship cancellation."
	Author="Mark Sellers"
	SPName="USR_USP_CREATE_PROJECTSPONSORSHIP_CANCELLATION_INTERACTIONS"
	GrantServiceRolePermission="true"
	>

	<!-- 
	Remarks:    Part of 2017 new OnBoarding process. Creates all cancellation Interactions
				when cancelling a Project Sponsorship.
				
				If the @interactionTypeCodeID passed in is null, an exception is thrown.

	History:
	Date            Modified By     Comments
	09-Feb-2017		MSellers		Initial Version
	23-Feb-2017		MSellers		Per Pamela's updated workflow, ALWAYS create a Pending Cancellation Interaction, no matter what!
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_CREATE_PROJECTSPONSORSHIP_CANCELLATION_INTERACTIONS
(
	@sponsorshipID uniqueidentifier = null,				-- The sponsorship that the interactions will pertain to.  
														-- This is used to pull the financial sponsor 
														-- However, it is not used for the child information
	@opportunityID uniqueidentifier = null,				-- Child to include in the cancellation interaction
	@interactionTypeCodeID uniqueidentifier = null,		-- The ID of the Interaction Type that the user selected (Cancellation Letter, Departure Cancellation Letter, ...)
	@changeAgentID uniqueidentifier = null				-- Used to specify change agent for CHANGEDBYID and ADDEDBYID fields.  USP_CHANGEAGENT_GETORCREATECHANGEAGENT is called if it's null
)
as
begin
	set nocount on 
	
	if @changeAgentID is null  
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output

	declare @raiseErrorIfNotFound bit = 1	
	
	declare @statusCode_Pending tinyint = 1
	
	declare @interactionSummary nvarchar(100) = 'Sponsorship has been cancelled'	-- Used for the Summary of all sponsor interactions

	
	-- Interaction Category / Subcategory Names and IDs used in creating and querying the interactions
	declare @interactionCategoryDesc_SponsorshipCancellation nvarchar(100) = 'Project Sponsorship';		-- The category used for all sponsor interactions
	
	declare @interactionSubcategoryDesc_CancellationLetter nvarchar(100) = 'Project Sponsorship Cancellation Letter';
	
	/*  *** 2017 MSellers: NEW only interaction type for a Project Sponsorship cancellation is the Project Sponsorship Cancellation Letter:
	declare @interactionSubcategoryDesc_ChildCondolenceLetter nvarchar(100) = 'Child Condolence Letter'
	declare @interactionSubcategoryDesc_DepartureCancellationLetter nvarchar(100) = 'Departure Cancellation Letter'
	declare @interactionSubcategoryDesc_ProgramCompletionCancellationLetter nvarchar(100) = 'Program Completion Cancellation Letter'
	declare @interactionSubcategoryDesc_SympathyAndCancellationLetter nvarchar(100) = 'Sympathy and Cancellation Letter'
	-- Memphis 2017: new interaction type:
	declare @interactionSubcategoryDesc_TransferChildCancellationLetter nvarchar(100) = 'Transfer Child Cancellation Letter';  
	*/
	
	declare @interactionSubcategoryID_CancellationLetter uniqueidentifier = null
	
	/*
	declare @interactionSubcategoryID_ChildCondolenceLetter uniqueidentifier = null
	declare @interactionSubcategoryID_DepartureCancellationLetter uniqueidentifier = null
	declare @interactionSubcategoryID_ProgramCompletionCancellationLetter uniqueidentifier = null
	declare @interactionSubcategoryID_SympathyAndCancellationLetter uniqueidentifier = null
	-- Memphis 2017: new interaction type:
	declare @interactionSubcategoryID_TransferChildCancellationLetter uniqueidentifier = null;
	*/

	-- Contact Method descriptions
	declare @contactMethodDesc_Mail nvarchar (100) = 'Mail'
	

	-- These are used to lookup the interactionTypeCodeIDs from USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE
	-- This is what the user selected on the form
	declare @interactionTypeCodeDesc_CancellationLetter nvarchar(100) = 'Project Sponsorship Cancellation Letter'
	
	/*
	declare @interactionTypeCodeDesc_ChildCondolenceLetter nvarchar(100) = 'Child Condolence Letter'
	declare @interactionTypeCodeDesc_DepartureCancellationLetter nvarchar(100) = 'Departure Cancellation Letter'
	declare @interactionTypeCodeDesc_ProgramCompletionCancellationLetter nvarchar(100) = 'Program Completion Cancellation Letter'
	declare @interactionTypeCodeDesc_SympathyAndCancellationLetter nvarchar(100) = 'Sympathy and Cancellation Letter'
	-- Memphis 2017: new interaction type:
	declare @interactionTypeCodeDesc_TransferChildCancellationLetter nvarchar(100) = 'Transfer Child Cancellation Letter';
	*/

	-- This are used to determine what interaction type the user selected
	declare @interactionTypeCodeID_CancellationLetter uniqueidentifier = null
	
	/*
	declare @interactionTypeCodeID_ChildCondolenceLetter uniqueidentifier = null
	declare @interactionTypeCodeID_DepartureCancellationLetter uniqueidentifier = null
	declare @interactionTypeCodeID_ProgramCompletionCancellationLetter uniqueidentifier = null
	declare @interactionTypeCodeID_SympathyAndCancellationLetter uniqueidentifier = null
	declare @interactionTypeCodeID_TransferChildCancellationLetter uniqueidentifier = null;
	*/


	-- Error messages if the interaction type code couldn't be found
	declare @interactionTypeCodeErrorMsg_CancellationLetter  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_CancellationLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE';
	
	/*
	declare @interactionTypeCodeErrorMsg_ChildCondolenceLetter  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_ChildCondolenceLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_DepartureCancellationLetter  nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_DepartureCancellationLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_ProgramCompletionCancellationLetter nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_ProgramCompletionCancellationLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE'
	declare @interactionTypeCodeErrorMsg_SympathyAndCancellationLetter nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_SympathyAndCancellationLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE';
	declare @interactionTypeCodeErrorMsg_TransferChildCancellationLetter nvarchar(255) = 'Could not find ' + @interactionTypeCodeDesc_TransferChildCancellationLetter + ' in code table USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE'
	*/


	begin try
		select @interactionTypeCodeID_CancellationLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_CancellationLetter)
		if @interactionTypeCodeID_CancellationLetter is null
			raiserror (@interactionTypeCodeErrorMsg_CancellationLetter, 16, 1)
		
		/*
		select @interactionTypeCodeID_ChildCondolenceLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_ChildCondolenceLetter)
		if @interactionTypeCodeID_ChildCondolenceLetter is null
			raiserror (@interactionTypeCodeErrorMsg_ChildCondolenceLetter, 16, 1)
			
		select @interactionTypeCodeID_DepartureCancellationLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_DepartureCancellationLetter)
		if @interactionTypeCodeID_DepartureCancellationLetter is null
			raiserror (@interactionTypeCodeErrorMsg_DepartureCancellationLetter, 16, 1)

		select @interactionTypeCodeID_ProgramCompletionCancellationLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_ProgramCompletionCancellationLetter)
		if @interactionTypeCodeID_ProgramCompletionCancellationLetter is null
			raiserror (@interactionTypeCodeErrorMsg_ProgramCompletionCancellationLetter, 16, 1)
	
		select @interactionTypeCodeID_SympathyAndCancellationLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_SympathyAndCancellationLetter)
		if @interactionTypeCodeID_SympathyAndCancellationLetter is null
			raiserror (@interactionTypeCodeErrorMsg_SympathyAndCancellationLetter, 16, 1)
			
		-- Memphis 2017: check for the new code:
		select @interactionTypeCodeID_TransferChildCancellationLetter = ID from dbo.USR_SPONSORSHIPCANCELLATIONINTERACTIONTYPECODE where lower (DESCRIPTION) = lower (@interactionTypeCodeDesc_TransferChildCancellationLetter)
		if @interactionTypeCodeID_TransferChildCancellationLetter is null
			raiserror (@interactionTypeCodeErrorMsg_TransferChildCancellationLetter, 16, 1)
		*/

		-- Set the Interaction Subcategory IDs	
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_CancellationLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionTypeCodeDesc_CancellationLetter, @raiseErrorIfNotFound
		
		/*
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_ChildCondolenceLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionSubcategoryDesc_ChildCondolenceLetter, @raiseErrorIfNotFound
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_DepartureCancellationLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionSubcategoryDesc_DepartureCancellationLetter, @raiseErrorIfNotFound
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_ProgramCompletionCancellationLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionSubcategoryDesc_ProgramCompletionCancellationLetter, @raiseErrorIfNotFound
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_SympathyAndCancellationLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionSubcategoryDesc_SympathyAndCancellationLetter, @raiseErrorIfNotFound
		-- Memphis 2017: get the subcategoryid for the new interaction type:
		exec dbo.USR_USP_INTERACTION_GETSUBCATEGORYID @interactionSubcategoryID_TransferChildCancellationLetter output, @interactionCategoryDesc_SponsorshipCancellation, @interactionSubcategoryDesc_TransferChildCancellationLetter, @raiseErrorIfNotFound
		*/

		declare @cancellationLetterSubcategoryDesc nvarchar(100) = ''
		set @cancellationLetterSubcategoryDesc = case 
													when @interactionTypeCodeID is null then ''
													when @interactionTypeCodeID = @interactionTypeCodeID_CancellationLetter then @interactionSubcategoryDesc_CancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_ChildCondolenceLetter then @interactionSubcategoryDesc_ChildCondolenceLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_DepartureCancellationLetter then @interactionSubcategoryDesc_DepartureCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_ProgramCompletionCancellationLetter then @interactionSubcategoryDesc_ProgramCompletionCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_SympathyAndCancellationLetter then @interactionSubcategoryDesc_SympathyAndCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_TransferChildCancellationLetter then @interactionSubcategoryDesc_TransferChildCancellationLetter
													else 'unknown'
												 end

		declare @cancellationLetterSubcategoryID uniqueidentifier = null
		set @cancellationLetterSubcategoryID = case 
													when @interactionTypeCodeID is null then null
													when @interactionTypeCodeID = @interactionTypeCodeID_CancellationLetter then @interactionSubcategoryID_CancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_ChildCondolenceLetter then @interactionSubcategoryID_ChildCondolenceLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_DepartureCancellationLetter then @interactionSubcategoryID_DepartureCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_ProgramCompletionCancellationLetter then @interactionSubcategoryID_ProgramCompletionCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_SympathyAndCancellationLetter then @interactionSubcategoryID_SympathyAndCancellationLetter
													--when @interactionTypeCodeID = @interactionTypeCodeID_TransferChildCancellationLetter then @interactionSubcategoryID_TransferChildCancellationLetter
												 end

		if @cancellationLetterSubcategoryDesc = 'unknown'
			raiserror ('Unknown interaction type selected.', 16, 1)
	
	
	end try
	begin catch
		exec dbo.USP_RAISE_ERROR
		return 1	
	end catch

	-- If no interaction was passed in, then we don't need to create an interaction
	if @cancellationLetterSubcategoryDesc = ''
		return 0

	declare @financialSponsorID uniqueidentifier = null
	set @financialSponsorID = dbo.USR_UFN_SPONSORSHIP_GETFINANCIALSPONSOR (@sponsorshipID)

	declare @currentDate date = getdate()
	
	declare @interactionID uniqueidentifier = null
	
	/*  ** 2/23/17 MSellers: do not perform the following for Projects, ALWAYS create a Pending Interaction! **
	-- Find the most recent pending interaction with the appropriate subcategory, which was created today
	-- If it is found, the child will be added to this interaction.  Otherwise a new interaction will be created
	select @interactionID = INTERACTION.ID
	  from dbo.INTERACTION 
	 where INTERACTION.SEQUENCEID = 
			(select max(i2.SEQUENCEID) 
			   from dbo.INTERACTION i2
			  where i2.CONSTITUENTID = @financialSponsorID
				and i2.INTERACTIONSUBCATEGORYID = @cancellationLetterSubcategoryID
				and i2.EXPECTEDDATE = @currentDate
				and i2.STATUSCODE = @statusCode_Pending)
	*/

	-- ALWAYS create one
	--if @interactionID is null
		exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
			@id = @interactionID output,
			@constituentID = @financialSponsorID,
			@summary = @interactionSummary,
			@categoryName = @interactionCategoryDesc_SponsorshipCancellation,
			@subcategoryName = @cancellationLetterSubcategoryDesc,
			@expectedDate = @currentDate,
			@owner = null,
			@contactMethodDesc = @contactMethodDesc_Mail,
			@comment = '',						
			@letterTypeDesc = '',
			@fulfillmentStatusDesc = '',
			@eftBrochureCode = 0,
			@resendCode = 0,
			@changeAgentID = @changeAgentID
		
	-- Add the project to the interaction (already exisiting or new one)
	if @interactionID is not null
	exec dbo.USR_USP_INTERACTION_SPONSOR_SETSPONSOREDPROJECTID 
			@interactionID = @interactionID,			-- Interaction ID of the interaction to add the sponsored project to
			@sponsorshipOpportunityID = @opportunityID,	-- sponsored project ID
			@changeAgentID = @changeAgentID

end


		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
