<SQLStoredProcedureSpec
	xmlns="bb_appfx_sqlstoredprocedure"
	xmlns:common="bb_appfx_commontypes"
	ID="078c3e30-1f73-457e-8298-71d69ef78b59"
	Name="USR_USP_SPONSORSHIP_CREATEUNAVAILABLESPONSORSHIPINTERACTIONS"
	Description="Creates the interactions pertaining to a unavailable sponsorship"
	Author="Cary Mayeda"
	SPName="USR_USP_SPONSORSHIP_CREATEUNAVAILABLESPONSORSHIPINTERACTIONS" >

	<!-- 
	Remarks:    This sproc is used by the Unavailable sponsorship form to create the appropriate interactions on the financial and corresponding sponsors for a sponsorship.
				NOTE:  This sproc is used by both new sponsorship and new prospect sponsorships.

	History:
	Date            Modified By     Comments
	22-Sep-2012		CMayeda			Initial Version
	25-Sep-2012		CMayeda			Added Child Welcome Letter interaction - FogBugz Case 826
	28-Sep-2012		CMayeda			Fixed @interactionCategoryDesc_ChildLetter = 'Child Letter'	(should be 'Child Letters'
	29-Sep-2012		CMayeda			Set Child Welcome Letter expected date to 2 months out - FogBugz Case 855
	29-Sep-2012		CMayeda			Only create call /email interaction if new sponsor/prospect sponsor - FogBugz Case 862, 863
	-->

	<CreateProcedureSQL>
		<![CDATA[
create procedure dbo.USR_USP_SPONSORSHIP_CREATEUNAVAILABLESPONSORSHIPINTERACTIONS (
	@sponsorshipID uniqueidentifier = null,			-- The sponsorship that the interactions will pertain to.  
													-- This is used to pull the financial sponsor and correspondent, and to determine if the recurring gift is on EFT
													-- However, it is not used for the child information
	@children xml = null,							-- The list of children to add to the interactions created. USR_UFN_UNAVAILABLECHILDREN_FOR_TRANSFERSPONSORSHIP_FROMITEMLISTXML is used to pull the unavailable and transfer child from this xml string
	@donorContactCodeID uniqueidentifier = null,	-- ID from USR_UNAVAILABLE_SPONSORSHIP_CONTACTCODE representing whether the donor was contacted
	@isProspect bit = 0,							-- Is this a prospect sponsorship.  0=Not Prospect, 1=Prospect
	@changeAgentID uniqueidentifier = null			-- Used to specify change agent for CHANGEDBYID and ADDEDBYID fields.  USP_CHANGEAGENT_GETORCREATECHANGEAGENT is called if it's null
)
as
begin
	if @changeAgentID is null  
		exec dbo.USP_CHANGEAGENT_GETORCREATECHANGEAGENT @changeAgentID output
	
	
	-- Constants
	declare @callCenterManagerConstituentID uniqueidentifier = 'B25168DC-4DD4-46ED-B4DD-C5A26A965667'
	
	declare @welcomeGreetingPhoneCallDelay tinyint = 25		-- How many days after the current date to set the Expected Date of the Welcome Greeting Phone Call (note: email expected date is 

	declare @interactionSummary nvarchar(100) = ''
	if @isProspect = 0
		set @interactionSummary = 'New sponsorship complete'
	else
		set @interactionSummary = 'New prospect sponsorship complete'

	declare @childInteractionSummary nvarchar(100) = 'New sponsorship complete'			-- Used for the Summary of all child interactions

	declare @welcomeCallComment nvarchar (100) = 'Unavailable transfer complete'
	declare @prospectThankYouComment nvarchar (100) = 'Unavailable transfer complete'

	declare @interactionLetterTypeDesc_Contacted nvarchar(100) = 'Contacted'
	declare @interactionLetterTypeDesc_NotContacted nvarchar(100) = 'Not Contacted'

	declare @interactionFulfillmentStatus_CallInProcess nvarchar(100) = 'Phone Call in Process'
	
	-- Interaction Category / Subcategory Names used in creating the interactions
	declare @interactionCategoryDesc_SponsorWelcome nvarchar(100) = 'Sponsor Welcome'
	declare @interactionCategoryDesc_ProspectWelcome nvarchar(100) = 'Prospect Welcome'
	declare @interactionCategoryDesc_ChildLetter nvarchar(100) = 'Child Letters'				-- The category used for all child interactions


	-- Sponsor interaction sub categories
	declare @interactionSubcategoryDesc_UnavailableChildLetter nvarchar(100) = 'Unavailable Child Letter'
	declare @interactionSubcategoryDesc_UnavailableChildLetterAndPacket nvarchar(100) = 'Unavailable Child Letter & Packet'
	declare @interactionSubcategoryDesc_ProspectUnavailableChildLetter nvarchar(100) = 'Prospect Unavailable Child Letter'
	declare @interactionSubcategoryDesc_ProspectUnavailableChildLetterAndPacket nvarchar(100) = 'Prospect Unavailable Child Letter & Packet'
	declare @interactionSubcategoryDesc_WelcomeGreeting nvarchar(100) = 'Welcome Greeting'
	declare @interactionSubcategoryDesc_WelcomePacketAndProfileCorrespondingSponsor nvarchar(100) = 'Welcome Packet & Profile - Corresponding Sponsor'
	declare @interactionSubcategoryDesc_ProspectThankYou nvarchar(100) = 'Prospect Thank You'	
	declare @interactionSubcategoryDesc_ProspectThankYou nvarchar(100) = 'Prospect Thank You'	
	declare @interactionSubcategoryDesc_UnavailableChildNotification nvarchar(100) = 'Unavailable Child Notification'	
	
	-- Child interaction sub categories
	declare @interactionSubcategoryDesc_ChildWelcomeLetter nvarchar(100) = 'Child Welcome Letter'


	-- Contact Method descriptions
	declare @contactMethodDesc_Mail nvarchar (100) = 'Mail'
	declare @contactMethodDesc_Email nvarchar (100) = 'Email'
	declare @contactMethodDesc_Phone nvarchar (100) = 'Phone'

	-- Response Category descriptions
	declare @interactionResponseCategory_DonorContact nvarchar(100) = 'Donor Contact'
	declare @interactionResponseCategory_LeftMessage nvarchar(100) = 'Left Message'
	declare @interactionResponseCategory_MessageType nvarchar(100) = 'Message Type'
	declare @interactionResponseCategory_PacketReceived nvarchar(100) = 'Packet Received'
	declare @interactionResponseCategory_EFTReceived nvarchar(100) = 'EFT Received'

	-- Response descriptions
	declare @interactionResponse_No nvarchar(100) = 'No'
	declare @interactionResponse_None nvarchar(100) = 'None'
	declare @interactionResponse_Unknown nvarchar(100) = 'Unknown'



	declare @unavailableSponsorshipContactCodeID_Contact uniqueidentifier = null
	declare @unavailableSponsorshipContactCodeID_NoContact uniqueidentifier = null
	
	begin try
		-- These are required for the sproc to work correctly, so we need to throw an exception if the IDs aren't found
		select @unavailableSponsorshipContactCodeID_Contact = ID from dbo.USR_UNAVAILABLE_SPONSORSHIP_CONTACTCODE where DESCRIPTION = lower ('Contact')
		if @unavailableSponsorshipContactCodeID_Contact is null 
			RAISERROR 100000 'Could not find the "Contact" donor contact code'
			
		select @unavailableSponsorshipContactCodeID_NoContact = ID from dbo.USR_UNAVAILABLE_SPONSORSHIP_CONTACTCODE where DESCRIPTION = lower ('No Contact')
		if @unavailableSponsorshipContactCodeID_NoContact is null 
			RAISERROR 100000 'Could not find the "No Contact" donor contact code'
	end try
	begin catch
	    exec dbo.USP_RAISE_ERROR
		return 1	
	end catch

	declare @welcomeMailLetterTypeDesc nvarchar(100) = ''
	set @welcomeMailLetterTypeDesc = case @donorContactCodeID
										when @unavailableSponsorshipContactCodeID_Contact then @interactionLetterTypeDesc_Contacted
										when @unavailableSponsorshipContactCodeID_NoContact then @interactionLetterTypeDesc_NotContacted
										else 'unknown donorContactCodeID'
									end


	declare @childIDList dbo.USR_UDT_CHILDIDLIST			-- This is used to store all the transfer children from the @children parm


	declare @financialSponsorID uniqueidentifier = null
	declare @correspondentID uniqueidentifier = null

	declare @financialSponsorInteractionOnly bit = 1

	declare @financialSponsorAddress nvarchar (150) = ''
	declare @correspondentAddress nvarchar (150) = ''
	declare @financialSponsorStateID uniqueidentifier = null
	declare @correspondentStateID uniqueidentifier = null

	declare @unavailableChildID uniqueidentifier = null
	declare @transferChildID uniqueidentifier = null
	
	set @correspondentID = dbo.USR_UFN_SPONSORSHIP_GETCORRESPONDENT (@sponsorshipID)
	set @financialSponsorID = dbo.USR_UFN_SPONSORSHIP_GETFINANCIALSPONSOR (@sponsorshipID)

	-- Determine who should get the interaction (Child Correspondent or Financial Sponsor)

	if @correspondentID is null
		set @financialSponsorInteractionOnly = 1
	else
	begin
		-- If there is a Child Correspondent, determine if they live at the same address as the Financial Sponsor
		-- If both have the same address, then the interaction goes to the Financial Sponsor
		-- If they have different addresses, then the interaction goes to the Child Correspondent
	
		-- Comparison is of the Address Block and State
		-- Blackbaud's OOB UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE is used to make the comparison more accuate
		-- It standardizes the addresses by applying standard abbreviations, removing white space, and converting to lower case
	
		declare @SUBSTITUTIONS dbo.UDT_STRINGPAIR_100 -- This is required by the user defined function, but we do not have any additional standardizations to apply
	
		select	@financialSponsorAddress = ADDRESSBLOCK,
				@financialSponsorStateID = STATEID
		  from	dbo.ADDRESS
		 where	CONSTITUENTID = @financialSponsorID
	 
		select	@correspondentAddress = ADDRESSBLOCK,
				@correspondentStateID = STATEID
		  from	dbo.ADDRESS
		 where	CONSTITUENTID = @correspondentID

	
		if (dbo.UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE(@financialSponsorAddress, @SUBSTITUTIONS)= dbo.UFN_ADDRESS_ADDRESSBLOCK_NORMALIZE_LOWERCASE(@correspondentAddress, @SUBSTITUTIONS))
			and ((@financialSponsorStateID is null and @correspondentStateID is null) or (@financialSponsorStateID = @correspondentStateID))
	    	    
			set @financialSponsorInteractionOnly = 1
		else
			set @financialSponsorInteractionOnly = 0
	end


	declare @welcomeMailCategoryDesc nvarchar (100) = ''
	declare @welcomeMailSubCategoryDesc nvarchar (100) = ''

	declare @interactionID uniqueidentifier = null
	declare @currentDate date = getdate()
	declare @eftBrochureCode bit = ~ dbo.USR_UFN_SPONSORSHIP_ISEFT (@sponsorshipID) 
			

	-- Create mail interactions on Financial Sponsor (one for every unvavailable / transfer child pair
	if @isProspect = 1
		set @welcomeMailCategoryDesc = @interactionCategoryDesc_ProspectWelcome
	else
		set @welcomeMailCategoryDesc = @interactionCategoryDesc_SponsorWelcome 
	
	declare @childLetterRecipient uniqueidentifier = null
	if @financialSponsorInteractionOnly = 1
		set @childLetterRecipient = @financialSponsorID
	else
		set @childLetterRecipient = @correspondentID
	
	-- Set the expected date of the child welcome to the last day of the month 2 months from the current date
	declare @childWelcomLetterExpectedDate date
	set @childWelcomLetterExpectedDate = dateadd(dd, -1, dateadd(mm, 3, (dateadd(dd,-(day(@currentDate)-1),@currentDate))))

	-- Get the number of child pairs passed in
	declare @childCount smallint 
	select @childCount = count(*) from dbo.USR_UFN_UNAVAILABLECHILDREN_FOR_TRANSFERSPONSORSHIP_FROMITEMLISTXML(@children)
	
	declare @childCounter smallint = 0	-- Used to know when you are on the first child
	
	declare childrenCursor cursor for
	select	dbo.USR_UFN_SPONSORSHIPOPPORTUNTITY_GETID_BYLOOKUPID (UNAVAILABLELOOKUPID),
			TRANSFERCHILDID
	  from	dbo.USR_UFN_UNAVAILABLECHILDREN_FOR_TRANSFERSPONSORSHIP_FROMITEMLISTXML(@children)
	
	open childrenCursor
	
	fetch next from childrenCursor 
	into @unavailableChildID, @transferChildID
	
	while @@FETCH_STATUS = 0
	begin
		begin try
			if @unavailableChildID is null
				RAISERROR 1000000 'Unavailable Child ID cannot be null'
			if @transferChildID is null
				RAISERROR 1000000 'Transfer Child ID cannot be null'			
		end try
		begin catch
			exec dbo.USP_RAISE_ERROR
			return 1	
		end catch
		
		-- Add the Transfer Child to the list of children to be used in other interactions
		insert @childIDList
		select @transferChildID
		
		set @childCounter = @childCounter + 1
		
		-- If I'm on the first kids in the list and the sponsor does not have any other active child sponsorships (other than the ones just created)
		-- then create a "with packet" interaction
		if @childCounter = 1 and dbo.USR_UFN_SPONSORSHIP_GETACTIVECHILDSPONSORSHIPSFORSPONSOR (@financialSponsorID) <= @childCount
		begin
			if @isProspect = 1
				set @welcomeMailSubCategoryDesc = @interactionSubcategoryDesc_ProspectUnavailableChildLetterAndPacket
			else
				set @welcomeMailSubCategoryDesc = @interactionSubcategoryDesc_UnavailableChildLetterAndPacket
		end
		
		-- otherwise create a "without packet" interaction 
		else
		begin
			if @isProspect = 1
				set @welcomeMailSubCategoryDesc = @interactionSubcategoryDesc_ProspectUnavailableChildLetter
			else
				set @welcomeMailSubCategoryDesc = @interactionSubcategoryDesc_UnavailableChildLetter				
		end

		exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
				@id = @interactionID output,
				@constituentID = @financialSponsorID,
				@summary = @interactionSummary,
				@categoryName = @welcomeMailCategoryDesc,
				@subcategoryName = @welcomeMailSubCategoryDesc,
				@expectedDate = @currentDate,
				@owner = null,						
				@contactMethodDesc = @contactMethodDesc_Mail,
				@comment = '',						
				@letterTypeDesc = @welcomeMailLetterTypeDesc,
				@fulfillmentStatusDesc = @interactionFulfillmentStatus_CallInProcess, 
				@eftBrochureCode = @eftBrochureCode,
				@resendCode = 0,
				@changeAgentID = @changeAgentID				
			
		if @interactionID is not null
		begin		
			exec dbo.USR_USP_INTERACTION_SPONSOR_SETUNAVAILABLECHILD
				@interactionID = @interactionID,
				@sponsorshipOpportunityChildID = @unavailableChildID,
				@changeAgentID = @changeAgentID

			exec dbo.USR_USP_INTERACTION_SPONSOR_SETTRANSFERCHILD
				@interactionID = @interactionID,
				@sponsorshipOpportunityChildID = @transferChildID,
				@changeAgentID = @changeAgentID
				
		end	
		
		if @isProspect = 0
			exec dbo.USR_USP_INTERACTION_CHILDLETTER_ADD_PENDING
				@id = @interactionID output,					
				@sponsorhipOpportunityChildID = @transferChildID,
				@summary = @childInteractionSummary,
				@categoryName = @interactionCategoryDesc_ChildLetter,
				@subcategoryName = @interactionSubcategoryDesc_ChildWelcomeLetter,
				@expectedDate = @childWelcomLetterExpectedDate,
				@owner = null,
				@contactMethodDesc = @contactMethodDesc_Mail,
				@comment = '',				
				@sponsorID = @childLetterRecipient,
				@changeAgentID = @changeAgentID


		fetch next from childrenCursor 
		into @unavailableChildID, @transferChildID

	end
	
	close childrenCursor
	deallocate childrenCursor
	
	begin try
		if @childCounter = 0
			RAISERROR 1000000 'No children processed in cursor'
	end try
	begin catch
	exec dbo.USP_RAISE_ERROR
		return 1	
	end catch
		
	-- Create Welcome Call or Prospect Thank You call/email if a new sponsor
	if dbo.USR_UFN_SPONSORSHIP_GETACTIVECHILDSPONSORSHIPSFORSPONSOR (@financialSponsorID) <= @childCount
	begin
		if @isProspect = 0
		begin
			-- Paid sponsorship gets a Welcome Call
			declare @expectedDate date = dateadd(d, @welcomeGreetingPhoneCallDelay, @currentDate)
	
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
				@id = @interactionID output,
				@constituentID = @financialSponsorID,
				@summary = @interactionSummary,
				@categoryName = @interactionCategoryDesc_SponsorWelcome,
				@subcategoryName = @interactionSubcategoryDesc_WelcomeGreeting,
				@expectedDate = @expectedDate,
				@owner = @callCenterManagerConstituentID,						
				@contactMethodDesc = @contactMethodDesc_Phone,
				@comment = @welcomeCallComment,						
				@letterTypeDesc = '',
				@fulfillmentStatusDesc = '',
				@eftBrochureCode = 0,
				@resendCode = 0,
				@changeAgentID = @changeAgentID				

			if @interactionID is not null
			begin
				exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
					@interactionID = @interactionID,
					@childIDList = @childIDList,
					@changeAgentID = @changeAgentID	

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_DonorContact,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_EFTReceived,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_LeftMessage,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_MessageType,
					@response = @interactionResponse_None,
					@responseDate = null,		
					@changeAgentID = @changeAgentID
			
				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_PacketReceived,
					@response = @interactionResponse_Unknown,
					@responseDate = null,		
					@changeAgentID = @changeAgentID
			end
		end	
	
		-- Is prospect
		-- Prospects get a Prospect Thank You (call / email)
		else
		begin
			declare @prospectContactMethodDesc nvarchar (100) = ''
			declare @prospectThankYouOwner uniqueidentifier = null
		
			if dbo.USR_UFN_CONSTITUENT_GETVALIDPRIMARYEMAILADDRESS(@financialSponsorID) <> ''
				set @prospectContactMethodDesc = @contactMethodDesc_Email
			else
			begin
				set @prospectContactMethodDesc = @contactMethodDesc_Phone
				set @prospectThankYouOwner = @callCenterManagerConstituentID
			end
		
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
				@id = @interactionID output,
				@constituentID = @financialSponsorID,
				@summary = @interactionSummary,
				@categoryName = @interactionCategoryDesc_ProspectWelcome,
				@subcategoryName = @interactionSubcategoryDesc_ProspectThankYou,
				@expectedDate = @currentDate,
				@owner = @callCenterManagerConstituentID,						
				@contactMethodDesc = @prospectContactMethodDesc,
				@comment = @prospectThankYouComment,						
				@letterTypeDesc = '',
				@fulfillmentStatusDesc = '',
				@eftBrochureCode = 0,
				@resendCode = 0,
				@changeAgentID = @changeAgentID				

			if @interactionID is not null
			begin
				exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
					@interactionID = @interactionID,
					@childIDList = @childIDList,
					@changeAgentID = @changeAgentID		

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_DonorContact,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_EFTReceived,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_LeftMessage,
					@response = @interactionResponse_No,
					@responseDate = null,		
					@changeAgentID = @changeAgentID

				exec dbo.USR_USP_INTERACTION_ADDRESPONSE 
					@interactionID = @interactionID,
					@responseCategoryName = @interactionResponseCategory_MessageType,
					@response = @interactionResponse_None,
					@responseDate = null,		
					@changeAgentID = @changeAgentID
			
			end
		end
	end

	if @financialSponsorInteractionOnly = 0
	begin
		-- Add the Correspondent Interaction
		exec dbo.USR_USP_INTERACTION_SPONSOR_ADD_PENDING 
			@id = @interactionID output,
			@constituentID = @correspondentID,
			@summary = @interactionSummary,
			@categoryName = @welcomeMailCategoryDesc,
			@subcategoryName = @interactionSubcategoryDesc_WelcomePacketAndProfileCorrespondingSponsor,
			@expectedDate = @currentDate,
			@owner = null,						
			@contactMethodDesc = @contactMethodDesc_Mail,
			@comment = '',						
			@letterTypeDesc = '',
			@fulfillmentStatusDesc = @interactionFulfillmentStatus_CallInProcess, 
			@eftBrochureCode = 0,
			@resendCode = 0,
			@changeAgentID = @changeAgentID				

		if @interactionID is not null
			exec dbo.USR_USP_INTERACTION_SPONSOR_ADDCHILDREN 
				@interactionID = @interactionID,
				@childIDList = @childIDList,
				@changeAgentID = @changeAgentID
	end


	return 0
end

		]]>
	</CreateProcedureSQL>

</SQLStoredProcedureSpec>
